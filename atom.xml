<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MY+</title>
  
  <subtitle>子非鱼，安知鱼之乐！</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://suiang.cn/"/>
  <updated>2021-01-12T22:19:36.591Z</updated>
  <id>http://suiang.cn/</id>
  
  <author>
    <name>苏扬</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS 灵活的流(Flow)布局</title>
    <link href="http://suiang.cn/posts/32886/"/>
    <id>http://suiang.cn/posts/32886/</id>
    <published>2020-11-12T11:18:00.000Z</published>
    <updated>2021-01-12T22:19:36.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>本部分用于说明<strong>流式(flow)属性</strong>和<strong>弹性(flex)单位</strong>. 使用它们可以创建非常灵活地适用于各种各样的视图<code>(view)</code>和内容尺寸<code>(content sizes)</code>的布局。</p><a id="more"></a><p>流式<code>(flow)</code>属性和弹性<code>(flex)</code>单位旨在解决目前现下的 CSS 无法解决或实现的一些问题: </p><ul><li>支持在容器<code>(containers)</code>和视口<code>(viewport)</code>中的元素的垂直和水平对齐；</li><li>支持当替代元素在同一行内且高度相同时，实现灵活的多栏布局（边栏-内容-边栏）。</li><li>支持定义复杂的位置：当元素的视图顺序<code>(visual order)</code>与DOM中的元素顺序不同时，可以使用静态布局。</li></ul><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>弹性布局<code>(Flexible layouts)</code>是指使用<em>弹性<code>(flex)</code></em>长度单位和<em>流<code>(flow)</code></em>属性。 弹性长度单位<code>(flex units)</code>允许使用在定义元素的尺寸<code>(size)</code>、外边距<code>(margin)</code>、 内边距<code>(padding)</code>，作为包含块<code>(containing block)</code>的剩余可用空间的一部分。弹性单位的值是一个十进制数字，数字后加上”*”(星号)作为单位识别符。</p><p><em>流(flow)</em>属性用来定义包含块<code>(contained blocks)</code>在正常流<code>(position:static)</code>中的布局方法。或者可以说，<em>流(flow)</em> 定义了容器的布局管理器。此模块包含以下标准的布局管理器定义：</p><ol><li>垂直布局 <code>(vertical)</code></li><li>水平布局 <code>(horizontal)</code></li><li>水平布局-允许换行 <code>(horizontal-flow)</code></li><li>垂直布局-允许换行 <code>(vertical-flow)</code></li><li>模板化布局<code>(templated layout)</code></li></ol><p>弹性(Flex)单元的值可以认为是有弹簧张力的。它根据自己本身的”弹性”来自动调整尺寸和位置。如定义值如下：</p><p><img src="https://img.vim-cn.com/92/0f32941369a9e30998b81ce1c9f54c7b7ffe35.png" alt="image-20200907122307779" style="zoom:50%;"> </p><p>上面图片中块的布局的HTML代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>... some text ...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>p元素有以下样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;             <span class="comment">/* 固定宽度 - 容器的40% */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">2</span>*;        <span class="comment">/* 左边的 "弹簧" 的力量为 2 */</span></span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">1</span>*;       <span class="comment">/* 右边的 "弹簧" 的力量为 1 */</span></span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid black; <span class="comment">/* 固定宽度的边框 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-弹性（Flex）长度单位"><a href="#2-弹性（Flex）长度单位" class="headerlink" title="2. 弹性（Flex）长度单位"></a>2. 弹性（Flex）长度单位</h2><p>在弹性单位中，元素的尺寸是对剩余空间内的可用包含框的计算。</p><p>弹性单位值是在所有非弹性单位值计算完成后计算的——是布局算法的最后一步。在这一步中，它的值可能来于包含容器的剩余未分配空间。在容器的垂直和水平方向上，所有弹性值在这个剩余未分配空间通过竞争来得出自己的计算值。</p><p>弹性单位只适用于元素的CSS属性中的<em>内边距<code>(padding)</code></em>、<em>外边距<code>(margin)</code></em>、<em>宽度<code>(width)</code></em>、<em>高度<code>(height)</code></em>。 它也可以用在静态<code>(static正常流)</code>、绝对定位<code>(absolute)</code>的元素中。浮动元素<code>(float)</code>不支持弹性单位——若为浮动元素指定了弹性单位值时会被当做<em><code>auto</code></em>值。</p><p>在计算元素的最终尺寸时，弹性单元的值被解释为一个权重<code>(weight)</code>。如果剩余空间的弹性值总和小于1<em>，相应的剩余部分将保持未分配。若果弹性值总和大于或等于1</em>，所有的剩余空间将使用该弹性值作为比例分配权重来分配。</p><p>例如，下面这个示例:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123; <span class="attribute">width</span>:<span class="number">300px</span>; &#125;</span><br><span class="line"><span class="selector-id">#element</span> &#123; <span class="attribute">width</span>:<span class="number">1</span>*;</span><br><span class="line">           <span class="attribute">margin-left</span>:<span class="number">2</span>*;</span><br><span class="line">           <span class="attribute">margin-right</span>:<span class="number">1</span>*;</span><br><span class="line">           <span class="attribute">border</span>:<span class="number">2px</span> solid;</span><br><span class="line">           <span class="attribute">padding</span>:<span class="number">0</span>; &#125;</span><br></pre></td></tr></table></figure><p>#container元素中的#element元素将会应用下面的这个计算尺寸：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">弹性值总和   = 1* + 2* + 1*               = 4*;</span><br><span class="line">待分配宽度   = 300px - 2px - 2px          = 296px; // 容器宽度 - 固定边框宽度</span><br><span class="line">宽度(width)  = 1/4 * 待分配宽度(296px)   = 74px;</span><br><span class="line">右外边距     = 1/4 * 待分配宽度(296px)   = 74px;</span><br><span class="line">左外边距     = 2/4 * 待分配宽度(296px)   = 148px;</span><br></pre></td></tr></table></figure><p>弹性单位值的计算遵循所有的通常约束。 例如, 最小宽度(<code>min-width</code>)和最大宽度(<code>max-width</code>)定义可以”弹性”的宽度的边界。出于弹性单位计算的原因，初始（默认）的最小宽度属性值被解释为具有最小的内在价值(intrinsic value)。</p><h3 id="2-1-最小内在价值-min-intrinsic-最大内在价值-max-intrinsic-长度值。"><a href="#2-1-最小内在价值-min-intrinsic-最大内在价值-max-intrinsic-长度值。" class="headerlink" title="2.1. 最小内在价值(min-intrinsic), 最大内在价值(max-intrinsic) 长度值。"></a>2.1. 最小内在价值(min-intrinsic), 最大内在价值(max-intrinsic) 长度值。</h3><p>CSS 的最小宽度<code>(min-width)</code>、最大宽度<code>(max-width)</code>、宽度(width)和最小高度<code>(min-height)</code>、最大高度<code>(max-height)</code>、高度<code>(height)</code>属性值可以接受以下的指定值： 最小内在价值<code>(min-intrinsic)&#39;和最大内在价值</code>(max-intrinsic)’。</p><ul><li>最小内在价值<code>(min-intrinsic)</code> —— 在一些容器中，该值指在相应方向上无需溢出<code>(overflow)</code>渲染时的最小长度。例如：对于设置<code>overflow:auto</code>的元素，它的最小长度为显示时没有滚动条的最小长度。</li><li>最大内在价值<code>(max-intrinsic)</code>—— 在一些容器中，该值指所有的子元素显示无需换行时的最小长度。或者说，当某元素的高度为<code>max-intrinsic</code>时，在水平布局(类似<code>*rtl*/*ltr*)</code>的系统,或者垂直布局的系统(类似<code>*ttb*</code>)上，最大内在价值<code>(max-intrinsic)</code>指当该元素的宽度达到最小时的该元素最小高度。</li></ul><blockquote><p>若为段落<code>&lt;p&gt;first second&lt;/p&gt;</code>设置<code>width:min-intrinsic</code>时，该段落的宽度为该段落中最宽的那个单词的宽度。<br>若为这个段落设置<code>width:max-intrinsic</code>时，则它的宽度为该段落中所有单词和空格长度的总和——该段落将呈现为单行文本。</p></blockquote><h2 id="3-流-flow-属性"><a href="#3-流-flow-属性" class="headerlink" title="3. 流(flow)属性"></a>3. 流(flow)属性</h2><p>流(flow)属性定义了容器如何布局它的子元素们。或者说，它建立了容器元素的布局管理器。<br><strong>‘flow’</strong></p><p><img src="https://img.vim-cn.com/55/7442565ccfb4ae616d88c61fcc0fb9c269b30a.png" alt="image-20200912150024749" style="zoom:50%;"> </p><p>该属性定义了子元素在正常流中的布局方法：</p><p><img src="https://img.vim-cn.com/b8/adae7cd9265cf169e31796dc98ea4c389989b1.png" alt="image-20200912150155201" style="zoom:50%;"> </p><p>文档中使用的术语：</p><ul><li><p><em>流式容器<code>(flow container)</code></em></p><p> 流式容器<code>(flow container)</code>是指包含<code>&#39;flow&#39;</code>样式属性且值不为<em><code>default</code></em>的块元素。这种元素使用给定的布局管理器来布局它的块子元素。如果流式容器<code>(flow container)</code>包含<em><code>display</code></em>不为<code>block</code>、<code>list-item</code>、<code>code&gt;table</code> 的子元素，则这些子元素会包装在一个匿名块或表容器以便参与流式布局。</p><ul><li><p><em>流元素(<code>flowed element)</code></em></p><p>流元素<code>(flowed element)</code>的直接父元素为流式容器<code>(flow container)</code>。这些元素被父流式容器的布局管理器用来替换。</p></li></ul></li></ul><h3 id="3-1-垂直布局-flow-vertical"><a href="#3-1-垂直布局-flow-vertical" class="headerlink" title="3.1. 垂直布局(flow:vertical)"></a>3.1. 垂直布局(flow:vertical)</h3><p>垂直流比较接近标准的自上而下的块元素的布局方式，例如<code>div</code>, <code>ul</code>等等。和标准布局方式唯一的区别在于硫元素使用弹性单位时。</p><p><code>flow:vertical</code>容器中的所有静态子元素将会被替换为从上到下、一个接一个的根据容器宽度形成一个单一的列。其所包含的定义了弹性单位的子元素的宽度值将会使用容器的宽度值来计算。同样，被包含元素的垂直尺寸会使用容器的高度来计算。如果容器的高度未定义，或者高度定义为<code>height:auto</code>，则将没有剩余空间来分配给弹性值，这样的话，在这个方向上的弹性值可以被忽略掉。</p><p>如果容器定义了高度，且它的高度大于被包含元素的最小价值高度<code>(min-intrinsic)</code>，则存在剩余空间。在这样的容器里，这个空间被分配给定义了垂直弹性值的子元素。</p><p>例如，下面的样式:</p><p><img src="https://img.vim-cn.com/6c/b926ecaf1611909c35a0774c359e1649b32753.png" alt="image-20200907133802606" style="zoom:50%;">  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123; <span class="attribute">height</span>:<span class="number">100%</span>; <span class="attribute">border</span>:<span class="number">1px</span> dotted; &#125;</span><br><span class="line"><span class="selector-id">#first</span> &#123; <span class="attribute">margin-bottom</span>:<span class="number">1</span>*; &#125;</span><br></pre></td></tr></table></figure><p>当定义下面的HTML标记时:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Alignment to top/bottom<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"first"</span> <span class="attr">style</span>=<span class="string">"margin-bottom:1*"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>margin-bottom:1*;<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Shifts rest to the bottom<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"second"</span>&gt;</span></span><br><span class="line">    Normal div</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>则会将#first元素放在<code>#container</code>的顶部，而将<code>#second</code>元素放在它的底部。</p><h4 id="3-1-1-在flow-vertical容器中外边距堆叠-collapsing"><a href="#3-1-1-在flow-vertical容器中外边距堆叠-collapsing" class="headerlink" title="3.1.1. 在flow:vertical容器中外边距堆叠(collapsing)"></a>3.1.1. 在flow:vertical容器中外边距堆叠(collapsing)</h4><p>在CSS中，被包含元素的垂直编辑通常会叠到一起。 这里唯一需要注意的时当堆叠到垂直边距包含弹性值，而对应的另一个元素是固定值时。这种情况下，这个固定值会作为两个元素间弹性计算值的”最小约束<code>(min-constraint)</code>“。这样，边距是弹性的，但是它不能小于这个固定值。</p><h3 id="3-2-水平布局-flow-horizontal"><a href="#3-2-水平布局-flow-horizontal" class="headerlink" title="3.2. 水平布局(flow:horizontal)"></a>3.2. 水平布局(flow:horizontal)</h3><p>这是一个单行布局。 设置<code>flow:horizontal</code>的容器的所有静态子元素会水平地一个接一个的排列成一行。布局是相对于容器的方向<code>direction</code>属性进行。</p><p>在水平方向上，若子元素的宽度<code>(width)</code>、左右外边距<code>(margin)</code>、边框<code>(border)</code>、内边距<code>(padding)</code>给定了一个弹性值，它们将参与剩余空间的分配。<code>flow:horizontal</code>容器的所有直接子元素将对容器内容区<code>(content box)</code>中左右边界间的剩余空间进行计算，使这个空间根据它们的弹性值进行分配。</p><p>在垂直方向上：被包含元素的高度、上下外边距、边框、内边距的弹性值使用容器的高度值来计算。这使<code>flow:horizontal</code>容器的子元素排序不仅是水平地，也可以是垂直的。</p><p>下面的样式中，所有的子元素拥有相同的高度：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>       &#123; <span class="attribute">flow</span>:horizontal; <span class="attribute">border-spacing</span>:<span class="number">4px</span>; <span class="attribute">padding</span>:<span class="number">4px</span>; &#125;</span><br><span class="line"><span class="selector-id">#container</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">height</span>:<span class="number">1</span>*; &#125;</span><br></pre></td></tr></table></figure><p>渲染结果如下:</p><p><img src="https://img.vim-cn.com/d1/28bcfe19584bd1c54bbe25e0a391c865a77783.png" alt="image-20200907133856916" style="zoom:50%;">  </p><p>下面，所有的子元素都设置为最小内在价值高度。而将上外边距设置为<code>1*</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span>       &#123; <span class="attribute">flow</span>:horizontal; <span class="attribute">border-spacing</span>:<span class="number">4px</span>; <span class="attribute">padding</span>:<span class="number">4px</span>; &#125;</span><br><span class="line"><span class="selector-id">#container</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">margin-top</span>:<span class="number">1</span>*; <span class="attribute">height</span>:auto; &#125;</span><br><span class="line">                             <span class="comment">/* height:auto意思是&amp;quotﾅ(￷&lt;&amp;quot高度 */</span></span><br></pre></td></tr></table></figure><p><img src="https://img.vim-cn.com/ed/01a65704b6d7271b62f8d69fdce91b0b2734f0.png" alt="image-20200907123147573" style="zoom:50%;"> </p><h4 id="3-2-1-flow-horizontal容器中的外边距堆叠"><a href="#3-2-1-flow-horizontal容器中的外边距堆叠" class="headerlink" title="3.2.1. flow:horizontal容器中的外边距堆叠"></a>3.2.1. flow:horizontal容器中的外边距堆叠</h4><p><strong><code>flow:horizontal</code></strong>容器中包含块的水平外边距堆叠处理方式和<code>flow:vertical</code>容器相同。而对于<code>in-flow</code>子元素，它们不与<code>flow:horizontal</code>容器的外边距堆叠。</p><h4 id="3-2-2-内在尺寸-Intrinsic-dimensions"><a href="#3-2-2-内在尺寸-Intrinsic-dimensions" class="headerlink" title="3.2.2. 内在尺寸(Intrinsic dimensions)"></a>3.2.2. 内在尺寸(Intrinsic dimensions)</h4><p><strong><code>flow:horizontal</code></strong>容器的内在高度(<code>Intrinsic height</code>)是在它内部的一行中最高的元素的外边距框高度。 <code>flow:horizontal</code>容器的内在宽度是所有子元素在水平边距堆叠的情况下的最小内在宽度之和。  </p><h3 id="3-3-水平可换行布局-flow-horizontal-flow"><a href="#3-3-水平可换行布局-flow-horizontal-flow" class="headerlink" title="3.3. 水平可换行布局(flow:horizontal-flow)"></a>3.3. 水平可换行布局(flow:horizontal-flow)</h3><p><code>flow:horizontal-flow</code>布局是<code>flow:horizontal</code>布局的一种变种。该布局允许容器的子元素在水平方向上没有足够空间时换行。</p><p><code>clear:left|right|both</code>属性可以明确的中断元素布局流，使其成为多行。</p><p>在满足以下基本条件之一时，允许换行：</p><ol><li>某元素上使用了<code>clear:left|right|both</code>属性；</li><li>该行没有足够的水平工具来放置该元素。</li></ol><p>在垂直方向上，设置弹性值的包含块的高度、上下外边距、边框、内边距的值是使用当前<em>行</em>的高度。该行的高度等于在不影响弹性值计算的情况下该行中最高元素的高度。</p><p>在水平方向上，一行中的元素的弹性值计算和<code>flow:horizontal</code>布局相同。</p><p>例如, 下面的HTML标记语言:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"flow:horizontal-flow"</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:100px"</span> &gt;</span> </span><br><span class="line">    width:100px </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:1*"</span>    &gt;</span> </span><br><span class="line">    flexible width:1*</span><br><span class="line">        flexible width:1* </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:1*"</span>&gt;</span> </span><br><span class="line">        flexible width:1*</span><br><span class="line">        flexible width:1*</span><br><span class="line">        flexible width:1* </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:150px"</span> &gt;</span> </span><br><span class="line">    width:150px</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果如下:</p><p><img src="https://img.vim-cn.com/b0/27dc24b11e12f4432f7f810510c34f981b76e1.png" alt="image-20200907123434036" style="zoom:50%;"> </p><h3 id="3-4-垂直可换列布局-flow-vertical-flow"><a href="#3-4-垂直可换列布局-flow-vertical-flow" class="headerlink" title="3.4. 垂直可换列布局(flow:vertical-flow)"></a>3.4. 垂直可换列布局(flow:vertical-flow)</h3><p><code>flow:vertical-flow</code>布局类是一个多列布局，似于<code>flow:horizontal-flow</code>。在垂直方向上，元素会从上到下的排列放置。如果容器没有足够的垂直空间，元素会换列，变成多列布局。</p><p><code>clear:left|right|both</code> 属性允许中断列，使其明确地成为多列布局。</p><p>在满足一下条件之一时，会进行换列：</p><ol><li>在垂直方向上，该列上所有元素的弹性值之和大于1*；</li><li><code>clear:left|right|both</code>属性在某个元素中明确使用；</li><li>没有足够的垂直空间来放置下一个元素。</li></ol><p>在水平方向上，容器内的子元素的宽度、左右外边距、内边距的弹性值使用当前列的宽度来计算。该行的宽度等于在不影响弹性值计算的情况下该行中最宽元素的宽度。</p><p>在垂直方向上，某列中元素的弹性值计算方法与<code>flow:vertical</code>布局相同。</p><p>例如，下面的HTML标记：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"flow:vertical-flow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:150px"</span> &gt;</span> </span><br><span class="line">    1. height:150px </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:100px"</span> &gt;</span> </span><br><span class="line">    2. height:100px</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:0.3*"</span> &gt;</span> </span><br><span class="line">    3. flexible height:0.3*</span><br><span class="line">       flexible height:0.3* </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:0.7*"</span> &gt;</span> </span><br><span class="line">    4. flexible height:0.7*</span><br><span class="line">       flexible height:0.7*</span><br><span class="line">       flexible height:0.7* </span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:150px"</span> &gt;</span> </span><br><span class="line">    5. height:150px</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:150px"</span> &gt;</span> </span><br><span class="line">    6. height:150px</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"height:150px"</span> &gt;</span> </span><br><span class="line">    7. height:150px</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每个列表项设置了<code>width:150px</code>，这会生成下面的布局，列表项会处理成3列：</p><p><img src="https://img.vim-cn.com/a8/2e85e00fca1288a0e208d59698db4bf52e69ca.png" alt="image-20200907123521396" style="zoom: 50%;"> </p><h3 id="3-5-模板布局-flow-”template”-flow-grid-…"><a href="#3-5-模板布局-flow-”template”-flow-grid-…" class="headerlink" title="3.5. 模板布局(flow:”template” / flow: grid(…))"></a>3.5. 模板布局(flow:”template” / flow: grid(…))</h3><blockquote><p>请注意，该布局是<a href="http://www.w3.org/TR/css3-layout/" target="_blank" rel="noopener">http://www.w3.org/TR/css3-layout/</a>. 的一个简化版本，该想法的所有版权属于该文档的作者。</p></blockquote><p><code>flow: &lt;模板表达式&gt;</code>  允许根据模板表达式来替换放置元素。</p><p>在这里，模板表达式是一个字符串标识序列。每个字符串标识是一个使用空格分隔的名称标识列表中的一项，其中每个标识指定一个网格中的单元格。多列允许有相同的名称。在这种情况下，该标识相当于定义了一个横跨多个单元网格的占位符。</p><p>例如, 下面的模板定义了从”a”到”f”的一个3x4的共6个占位网格的表格。某些占位网格跨越了多个单元格：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flow</span>: "<span class="selector-tag">a</span> <span class="selector-tag">a</span> <span class="selector-tag">a</span>"</span><br><span class="line">      "<span class="selector-tag">b</span> <span class="selector-tag">c</span> <span class="selector-tag">e</span>"</span><br><span class="line">      "<span class="selector-tag">d</span> <span class="selector-tag">c</span> <span class="selector-tag">e</span>"</span><br><span class="line">      "<span class="selector-tag">d</span> <span class="selector-tag">c</span> <span class="selector-tag">f</span>";</span><br></pre></td></tr></table></figure><p>容器中的每个子元素使用 <code>float:&quot;占位标识名称&quot;</code> 属性绑定到模板定义的特定的占位网格对应的位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(1)</span> &#123; <span class="attribute">float</span>:<span class="string">"a"</span>; &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(2)</span> &#123; <span class="attribute">float</span>:<span class="string">"b"</span>;</span><br><span class="line">                  <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">                  <span class="attribute">height</span>:max-intrinsic; &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(3)</span> &#123; <span class="attribute">float</span>:<span class="string">"c"</span>;</span><br><span class="line">                  <span class="attribute">width</span>:*; <span class="attribute">height</span>:*; &#125; <span class="comment">/* flexes, a.k.a. shrink-to-fit */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(4)</span> &#123; <span class="attribute">float</span>:<span class="string">"d"</span>;</span><br><span class="line">                  <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">                  <span class="attribute">height</span>:*; &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(5)</span> &#123; <span class="attribute">float</span>:<span class="string">"e"</span>;</span><br><span class="line">                  <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">                  <span class="attribute">height</span>:*; &#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(6)</span> &#123; <span class="attribute">float</span>:<span class="string">"f"</span>;</span><br><span class="line">                  <span class="attribute">width</span>:<span class="number">150px</span>;</span><br><span class="line">                  <span class="attribute">height</span>:<span class="number">150px</span>; &#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，在使用该流式(flow)布局的容器内的直接子元素使用<code>float:left|right</code>将不起作用。或者说，被流式布局的元素只能使用<code>flow:&quot;template&quot;</code>定义的单元格来布局。</p></blockquote><p>模板容器中的所有没有绑定到网格的子元素将会作为单独的一行追加到最后。如果有多个子元素有相同的占位符名称，只有第一个(DOM中的顺序)将被绑定到占位网格上，剩余的元素会变成未绑定的。</p><p>每个占位符名称在模板中必须是唯一的、矩形的。否则，该模板将无效，流式布局将采用默认的<code>flow:default</code>.</p><p>例如，下面的HTML标记：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> "a", width:auto (that is 1*), height:auto(that is max-intrinsic) <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> "b", width:150px, height:max-intrinsic <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> "c", width:*, height:* (a.k.a. shrink-to-fit) <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> "d", width:150px, height:* <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> "e", width:150px, height:* <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> "f", width:150, height:150px<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>设置样式后渲染结果如下：</p><p><img src="https://img.vim-cn.com/ee/717efba8a1abeea2983415f521e3c308052f22.png" alt="image-20200907123622355" style="zoom:50%;"> </p><p>除了用字符定义名称外，还可以使用子元素在模板容器中的顺序数字，所以下面的这个模板：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flow</span>: <span class="selector-tag">grid</span>(1 1,</span><br><span class="line"></span><br><span class="line">           2 3);</span><br></pre></td></tr></table></figure><p>会导致容器的前三个子元素布局到两行，且第一个元素放置在第一行，而第二、第三个元素放置在第二行。</p><h3 id="3-6-row函数布局-flow-row-tag1-tag2-…"><a href="#3-6-row函数布局-flow-row-tag1-tag2-…" class="headerlink" title="3.6. row函数布局( flow: row(tag1, tag2, …) )"></a>3.6. row函数布局( flow: row(tag1, tag2, …) )</h3><p><strong><code>flow:row()</code></strong>函数用来实现类似table的布局。<code>row()</code>函数的参数为元素标签的列表，该列表定义的元素将会放置在表格中的单独一行。</p><p>考虑下面的HTML标记:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="tag">&lt;<span class="name">dt</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>第一项的描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>第二项的描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且设置它的样式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dl &#123; flow: row(dt,dd); &#125;</span><br></pre></td></tr></table></figure><p>则它们将会渲染成如下：</p><table><thead><tr><th>第一项</th><th>第一项的描述</th></tr></thead><tbody><tr><td>第二项</td><td>第二项的描述</td></tr></tbody></table><p>如果<code>flow:row(...)</code>布局的元素内存在不匹配row中的模板的元素，则该元素将会被放置在单独的一行并跨越所有列。所有考虑下面的HTML标记：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>组别1<span class="tag">&lt;/<span class="name">header</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第一项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>第一项的描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第二项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>第二项的描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>组别2<span class="tag">&lt;/<span class="name">header</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>第三项<span class="tag">&lt;/<span class="name">dt</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>第三项的描述<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依然使用上面的样式，则它们会渲染成：</p><table><thead><tr><th><strong>组别1</strong></th><th></th></tr></thead><tbody><tr><td>第一项</td><td>第一项的描述</td></tr><tr><td>第二项</td><td>第二项的描述</td></tr><tr><td><strong>组别2</strong></td><td></td></tr><tr><td>第三项</td><td>第三项的描述</td></tr></tbody></table><p><strong><code>flow:row</code></strong>的声明可以在一列中接受一个元素列表。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flow: row(label, input select textarea);</span><br></pre></td></tr></table></figure><p>定义了两列，第一列放置了<code>&lt;label&gt;</code>元素，而所有其他的<code>&lt;input&gt;,&lt;select&gt;</code>和<code>&lt;textarea&gt;</code>  元素被放置在第二列。</p><h3 id="3-7-flow-stack"><a href="#3-7-flow-stack" class="headerlink" title="3.7. flow: stack"></a>3.7. flow: stack</h3><p><strong><code>flow:stack</code></strong>布局用于在容器中的任意位置放置元素。渲染的顺序取决于元素的DOM位置或<code>z-index</code>属性定义的顺序。</p><p>在水平和垂直方向上, 被包含元素的<code>width、height、margin、padding</code>的弹性值使用容器元素的宽度和高度来计算。在弹性计算中，没有子元素都被当做容器元素的唯一子元素来对待 - 子元素的位置不会影响其他子元素的位置。</p><p><strong><code>flow:stack</code></strong>容器元素的内在尺寸等同于容器中子元素外边距盒的最宽的和最高值。</p><p>考虑下面的HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">tab</span>=<span class="string">"标签页一"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>标签页二<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>标签页三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>它的样式为:  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123; <span class="attribute">flow</span>: stack; <span class="attribute">width</span>: max-content; &#125;</span><br><span class="line"><span class="selector-tag">section</span> &gt; <span class="selector-tag">div</span> &#123; <span class="attribute">size</span>:*; <span class="comment">/* 跨越整个容器 */</span></span><br><span class="line">                <span class="attribute">visibility</span>:hidden; &#125;</span><br><span class="line"><span class="selector-tag">section</span><span class="selector-attr">[tab=first]</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(1)</span> &#123; <span class="attribute">visibility</span>:visible; &#125;<span class="selector-tag">section</span><span class="selector-attr">[tab=second]</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:nth-child(2)</span> &#123; <span class="attribute">visibility</span>:visible; &#125;</span><br></pre></td></tr></table></figure><p>通过修改<code>section</code>元素的 <code>tab</code>属性值，我们可以切换标签页的显隐。</p><blockquote><p>原则上，<code>flow:stack</code>布局在某些方面类似于在<code>position:relative</code>容器中包含<code>position:absolute</code>子元素。不过<code>flow:stack</code>的内在尺寸计算规则是其他CSS属性无法模拟的。</p></blockquote><h2 id="4-flow属性、float属性-和块格式上下文-block-formatting-context"><a href="#4-flow属性、float属性-和块格式上下文-block-formatting-context" class="headerlink" title="4. flow属性、float属性 和块格式上下文(block formatting context)"></a>4. <em>flow</em>属性、<em>float</em>属性 和块格式上下文(block formatting context)</h2><p>那些<code>flow</code>属性设置了非默认值的元素的直接子元素，将会建立一个新的块格式上下文，这个上下文类似于表格中的单元格。</p><h2 id="5-flow属性-与position属性"><a href="#5-flow属性-与position属性" class="headerlink" title="5. flow属性 与position属性"></a>5. <em>flow</em>属性 与<em>position</em>属性</h2><p><strong>流元素(<code>flowed element</code>)</strong>是指在流容器中的<code>position</code>为静态(默认)的子元素们。这意味着那些包含<code>position: absolute | fixed</code>的子元素会被当做<code>position:static</code>来处理。</p><p>在流元素中<code>position:relative</code> 是被允许的。因此，这些元素可以使用<code>left</code>、<code>right</code>、 <code>bottom</code>和<code>top</code>属性来定义它们相对于静态位置的偏移。</p><h3 id="5-1-position-absolute-fixed-与-弹性-Flex-单位值"><a href="#5-1-position-absolute-fixed-与-弹性-Flex-单位值" class="headerlink" title="5.1 position: absolute | fixed 与 弹性(Flex)单位值"></a>5.1 <em>position: absolute | fixed</em> 与 弹性<em>(Flex)</em>单位值</h3><p>弹性单位可以用在定义了<em><code>position:absolute</code></em>或<em><code>position:fixed</code></em>的元素的<em><code>left</code></em>、<em><code>top</code></em>、<em><code>right</code></em>和<em><code>bottom</code></em>属性中，这些元素的内边距(<em><code>padding</code></em>), 外边距(<em><code>margin</code></em>), 宽度(<em><code>width</code></em>)和高度(<em><code>height</code></em>)中的弹性单位值的计算将会参考包含它们的父块。</p><p>例如：下面的样式将会将<code>#light-box-dialog</code>元素放置在视口<code>(viewport)</code>的中央：</p><p><img src="https://img.vim-cn.com/fe/416dcc88738f76f549d74492e717ddac18a437.png" alt="image-20200907123713109" style="zoom:50%;"> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#light-box-dialog</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">1</span>*; <span class="attribute">top</span>:<span class="number">1</span>*; <span class="attribute">right</span>:<span class="number">1</span>*; <span class="attribute">bottom</span>:<span class="number">1</span>*;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>#light-box-dialo</code>g元素的宽度为400像素，高度为自动(即最小内在高度<code>height:min-intrinsic</code>)，且该元素将会放置在视口中央。</p><h2 id="6-flow属性与vertical-align属性"><a href="#6-flow属性与vertical-align属性" class="headerlink" title="6. flow属性与vertical-align属性"></a>6. <em>flow</em>属性与<em>vertical-align</em>属性</h2><p>流元素建立了一个块格式上下文。因此它们的<code>vertical-align</code>属性定义了它们内部垂直方向上的对齐方式，而不是它们本身在垂直方向上的对齐方式。或者说<em><code>vertical-align</code></em>类似于表格中的单元格。</p><h2 id="7-flow属性与border-spacing属性"><a href="#7-flow属性与border-spacing属性" class="headerlink" title="7. flow属性与border-spacing属性"></a>7. <em>flow</em>属性与<em>border-spacing</em>属性</h2><p><em><code>border-spacing</code></em>属性定义了两个流元素在水平和垂直方向上外边距的最小值。如果一个流元素定义了自己的外边距，则外边距使用的值是<em>border-spacing</em>定义值和该外边距定义中比较大的那个值。 如果这个外边距值使用了弹性单位值，则该弹性值的计算会将<em>border-spacing</em>值作为最小约束值。在这种情况下，计算出的弹性值不能小于<em><code>border-spacing</code></em>属性值。</p><h2 id="8-flow属性-与-外边距堆叠"><a href="#8-flow属性-与-外边距堆叠" class="headerlink" title="8. flow属性 与 外边距堆叠"></a>8. <em>flow</em>属性 与 外边距堆叠</h2><p>不同的布局管理器的对流元素的外边距堆叠处理是不一样的。流容器外边距不会与它内部的硫元素堆叠。</p><h2 id="9-flow属性和-行内块-inline-block-元素"><a href="#9-flow属性和-行内块-inline-block-元素" class="headerlink" title="9. flow属性和 行内块(inline-block)元素"></a>9. <em>flow</em>属性和 行内块(<em>inline-block</em>)元素</h2><p>行内块放置在对应的行框中。原则上，行框是可以”弹性”的。</p><p>所以, 像<code>&lt;img&gt;、&lt;input&gt;、&lt;span style=&quot;display:inline-block&quot;&gt;</code>这些<em>inline-block</em>元素可以使用弹性单位来定义它们的尺寸、外边距、内边距。行框上下文的弹性单位计算依据于行框的水平、垂直尺寸，而它们的内容将不是可弹性的。</p><p>在水平方向上，行框在分配完所有非弹性内容后可能存在剩余的空间(例如单词框)。这些空间将会在所有指定了弹性值的元素的宽度、左右外边距(或内边距)间分配。</p><p>在垂直方向上, 行内块<code>(inline-block)</code>元素的高度、上下外边距、内边距中的弹性值依据于行框的高度。例如，可以定义多个和行框同高度的子元素。</p><p>如果这样定义了，<code>text-align:justify</code>属性的计算将会放置弹性值计算之后。</p><p>例如下面的HTML标记:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  p</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:4px</span>; <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span>; <span class="selector-tag">line-height</span><span class="selector-pseudo">:1.8em</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  span</span></span><br><span class="line"><span class="undefined">  &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span>; <span class="selector-tag">border</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">salmon</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span><span class="selector-pseudo">:seashell</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   First span:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width:2*"</span>&gt;</span>width:2*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   and second one:<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"width:1*"</span>&gt;</span>width:1*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这回到这<code>p</code>元素各种各样的宽度值：</p><p><img src="https://img.vim-cn.com/4f/d6bd02889220c7642f6b66c45c15be79d20959.png" alt="image-20200907123924218" style="zoom:50%;"> </p><blockquote><p>注意，上面的最后一个图像上，span已经达到了它的最小内在宽度(min-intrinsic)，所以它们已经排除掉了相关的弹性值计算。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;本部分用于说明&lt;strong&gt;流式(flow)属性&lt;/strong&gt;和&lt;strong&gt;弹性(flex)单位&lt;/strong&gt;. 使用它们可以创建非常灵活地适用于各种各样的视图&lt;code&gt;(view)&lt;/code&gt;和内容尺寸&lt;code&gt;(content sizes)&lt;/code&gt;的布局。&lt;/p&gt;
    
    </summary>
    
      <category term="Sciter" scheme="http://suiang.cn/categories/Sciter/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
      <category term="Sciter" scheme="http://suiang.cn/tags/Sciter/"/>
    
  </entry>
  
  <entry>
    <title>多线程入门</title>
    <link href="http://suiang.cn/posts/1014/"/>
    <id>http://suiang.cn/posts/1014/</id>
    <published>2020-10-03T13:30:00.000Z</published>
    <updated>2021-01-12T22:17:59.318Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>当你点击EXE文件系统一个应用程序的时候 - 系统会创建一个进程（process）<br>而在一个进程内可以包含多个线程(thread)。用来显示界面的线程，我们通常称为“界面线程”，<br>其他不是用来显示界面的线程，我们一般称为“工作线程”或者是“后台线程”。</p></blockquote><a id="more"></a><p>界面线程会使用 <code>win.loopMessage();</code> 启动一个消息循环，<br><code>win.loopMessage();</code>  就象一个快递公司不知疲倦的收发消息，直到用户关闭最后一个窗口他才会退出。<br>当然你也可以使用 <code>win.quitMessage()</code> 退出消息循环。</p><p>下面是一个启动界面线程的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win.ui;</span><br><span class="line"><span class="comment">/*DSG&#123;&#123;*/</span></span><br><span class="line"><span class="keyword">var</span> winform = win.form(text=<span class="string">"aardio form"</span>;right=<span class="number">759</span>;bottom=<span class="number">469</span>)</span><br><span class="line">winform.add(</span><br><span class="line">    button=&#123;cls=<span class="string">"button"</span>;text=<span class="string">"耗时操作"</span>; ...&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/*&#125;&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用户点击窗口上的按钮时会触发下面的回调函数</span></span><br><span class="line">winform.button.oncommand = <span class="function"><span class="keyword">function</span>(<span class="params">id,event</span>)</span>&#123;   </span><br><span class="line">    <span class="comment">//下面用sleep函数休眠5秒(5000毫秒)模拟耗时操作</span></span><br><span class="line">    sleep(<span class="number">5000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><p>你可以看到一个窗体显示在屏幕上，如果你去掉代码中的最后一句 <code>win.loopMessage();</code>那么窗体只会显示一下就消失了，你的程序也迅速退出了。</p><p>但如果你加上 <code>win.loopMessage();</code> 窗体就会一直显示在屏幕上（直到你点击关闭按钮）。<br>并且你可以做其他的操作，例如点击按钮。</p><p>我们尝试点击按钮，点击按钮后触发了 <code>winform.button.oncommand()</code> 函数，<br>一件让我们困惑的事发生了，窗体卡死了任何操作都没有反应，这是因为类似 <code>sleep(5000)</code> 这样的耗时操作阻塞了<code>win.loopMessage()</code>启动的消息循环过程。</p><p>一种解决方法是把 <code>sleep(5000)</code>改成 <code>win.delay(5000)</code>，虽然他们同样都是延时函数，但是<code>win.delay()</code>会同时继续处理窗口消息。但如果我们不只是延时还要做其他耗时的操作，那就需要启动一个新的线程。</p><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><blockquote><p>一个线程会排队执行一系列的编程指令，但一个线程同时只能做一件事。<br>例如在界面上有耗时的操作在执行时 - 就不能同时处理其他的界面消息或者响应用户的操作。<br>这时候我们就要使用多线程来完成我们的任务。</p></blockquote><p>我们假设有一个耗时操作是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面这个函数执行耗时操作</span></span><br><span class="line">doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"> str </span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;<span class="number">100</span>)&#123;</span><br><span class="line">        str = str + <span class="string">" "</span> + i;</span><br><span class="line">        sleep(<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们直接调用这个函数会是这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">doSomething( <span class="string">"也可以有参数什么的"</span> )</span><br></pre></td></tr></table></figure></p><p>如果希望写复杂一点调用这个函数，我们也可以这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invoke(doSomething ,,<span class="string">"也可以有参数什么的"</span> )</span><br></pre></td></tr></table></figure></p><p>如果我们希望创建一个新的线程来调用这个函数，那么就需要下面这样写：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.invoke(doSomething ,<span class="string">"也可以有参数什么的"</span> )</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>切记不要犯一个低级错误：</strong><br> 如果把创建线程的代码改为 <code>thread.invoke( doSomething(&quot;也可以有参数什么的&quot;) )</code><br>这是在创建线程前就调用函数了，实际执行的代码是 <code>thread.invoke( 123 )</code> 这肯定会出错的。</p></blockquote><h3 id="线程的规则与限制"><a href="#线程的规则与限制" class="headerlink" title="线程的规则与限制"></a>线程的规则与限制</h3><blockquote><p>线程有独立的运行上下文，独立的变量环境</p></blockquote><p>多线程最让人困惑的是<u>线程间的同步和交互</u>。</p><p>线程就象多个在并列的轨道上疾驰的火车，你要在A火车上与B火车上的人交互，或者你想让B火车上的人干什么，你不能直接从火车上把手伸出去跟别的火车上的人拉拉扯扯发生种种亲密的互动。</p><ul><li>一种方式是先让所有的火车都停下来，互动完了再继续往前开，需要互动的时候再停下来，这通常需要用到线程同步的锁，在aardio中就是<code>thread.lock()</code>，但实际上在aardio中多线程同步很少需要用到同步锁，所以这里我也就不多讲。</li><li>另外一种更先进的方式就是TLS(Thread Local Storage)，也就是<strong>线程局部存储</strong>。<br>一些编程语言的全局变量是多线程共享的，一次修改多个线程中立即生效，这看起来很方便，其实带来的潜在麻烦会很多，会制造大量混乱的BUG。而aardio自带TLS, 所有变量都是线程局部存储。你不能在多线程间直接共享变量。</li></ul><h4 id="交换变量的方法"><a href="#交换变量的方法" class="headerlink" title="交换变量的方法"></a>交换变量的方法</h4><ol><li><p>如果你有一些函数需要被多个线程用到，请他们写到库文件里，然后在任何线程中使用 <code>import</code> 语句导入即可使用。</p></li><li><p>可以在创建线程时，通过线程的启动参数把变量从一个线程传入另一个线程，例如：</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thread.invoke( 线程启动函数,<span class="string">"给你的"</span>,<span class="string">"这也是给你的"</span>,<span class="string">"如果还想要上车后打我电话"</span> )</span><br></pre></td></tr></table></figure><ol start="3"><li><p>多线程共享的变量，必须通过 <code>thread.get()</code> 函数获取，并使用 <code>thread.set()</code> 函数修改其值，<code>thread.table</code>对象对这两个函数做了进一步的封装（伪装成一个普通的表对象）</p></li><li><p>aardio提供了很多线程间相互调用函数的方法，通过这些调用方式的传参也可以交互变量，具体请查看aardio范例中的多线程范例。</p></li></ol><h4 id="交换变量的规则"><a href="#交换变量的规则" class="headerlink" title="交换变量的规则"></a>交换变量的规则</h4><p>在aardio中每个线程有独立的运行上下文、线程有独立的变量环境，有独立的堆栈，所以你不能把包含局部变量闭包的对象从一个线程传到另一个线程，常见的就是调用类创建的对象，因为this就是闭包变量。</p><p>另外你也不可以在一个线程中引用库文件，并且把引用的库直接传到另一个线程，因为库文件中通常会大量的使用局部变量闭包，而应该在每个线程中自行导入需要用到的库，一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"></span><br><span class="line">thread.invoke(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"线程要自己调用 import console;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.pause(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h3 id="调用窗口对象"><a href="#调用窗口对象" class="headerlink" title="调用窗口对象"></a>调用窗口对象</h3><p>新手可能不太容易理解，aardio中的这种模式给多线程开发带来了巨大的方便，在aardio的多线程代码中基本很少看到同步锁，也很少会因为同步出现各种BUG和麻烦，以前面并列飞奔的多个火车来比喻，在aardio中每辆火车都只要愉快的往前跑就行了，不存在谁停下来等谁同步的问题。</p><p>但不可否认，工作线程中如果能直接操作窗口上的控件那会带来巨大的方便（因为工作线程需要访问界面控件的需求还是非常多的），但这违反了aardio的规则，在aardio的旧版本中这是行不通的，在aardio新版本中，我们愉快的解决了这个问题。现在aardio中可以存在一些特权对象，让一些不能在线程中直接传递的对象可以跨线程传递，例如窗口对象，下面我们看一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win.ui;</span><br><span class="line"><span class="keyword">var</span> winform = win.form(text=<span class="string">"aardio form"</span>;right=<span class="number">759</span>;bottom=<span class="number">469</span>)</span><br><span class="line">winform.add(</span><br><span class="line">    button=&#123;cls=<span class="string">"button"</span>;text=<span class="string">"再来个多线程，可以多点几次不会乱的"</span>; ...&#125;;</span><br><span class="line">    edit=&#123;cls=<span class="string">"edit"</span>;edge=<span class="number">1</span>;multiline=<span class="number">1</span>;z=<span class="number">1</span>; ...&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = <span class="function"><span class="keyword">function</span>(<span class="params">id,event</span>)</span>&#123;</span><br><span class="line">    thread.invoke(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">winform</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;<span class="number">10</span>;<span class="number">1</span>)&#123;</span><br><span class="line">                winform.edit.print( time.tick(),<span class="string">"线程ID:"</span>,thread.getId() );</span><br><span class="line">                sleep(<span class="number">1000</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,winform</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><blockquote><p>注意上面的线程启动函数直接写在了参数里（匿名函数），跟下面的写法作用是一样的：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面这个函数执行耗时操作</span></span><br><span class="line"><span class="keyword">var</span> doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"> winform </span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;<span class="number">10</span>;<span class="number">1</span>)&#123;</span><br><span class="line">        winform.edit.print( time.tick(),<span class="string">"线程ID:"</span>,thread.getId() );</span><br><span class="line">        sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thread.invoke( doSomething,winform ) <span class="comment">//启动线程</span></span><br></pre></td></tr></table></figure><h3 id="界面与逻辑分离"><a href="#界面与逻辑分离" class="headerlink" title="界面与逻辑分离"></a>界面与逻辑分离</h3><p>在工作线程中直接操作界面控件固然令人愉快，<br>但如果代码量一大，界面与逻辑混杂在一起，会让代码不必要的变的千头万绪复杂臃肿。</p><p>如果把多线程比作多条轨道上并列飞奔的火车，那么火车交互的方法不仅仅只有停下来同步，或者把手伸出车窗来个最直接的亲密交互。一种更好的方式是拿起手机给隔壁火车上的人打个电话 - 发个消息，或者等待对方操作完了再把消息发回来。</p><p>这种响应式的编程方式在aardio里就是 <code>thead.command</code>，下面我们看一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win.ui;</span><br><span class="line"><span class="keyword">var</span> winform = win.form(text=<span class="string">"线程命令"</span>;right=<span class="number">599</span>;bottom=<span class="number">399</span>)</span><br><span class="line">winform.add(edit=&#123;cls=<span class="string">"edit"</span>; ...&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> thread.command;</span><br><span class="line"><span class="keyword">var</span> listener = thread.command();</span><br><span class="line">listener.print = <span class="function"><span class="keyword">function</span>(<span class="params"> ... </span>)</span>&#123;</span><br><span class="line">    winform.edit.print( ... ) <span class="comment">//我们在界面线程中这样响应工作线程的消息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">thread.invoke( <span class="comment">//创建工作线程</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">import</span> thread.command; <span class="comment">//必须在线程函数内部导入需要的库</span></span><br><span class="line">        thread.command.print(<span class="string">"hello world"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//调用界面线程的命令</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">winform.show();</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><blockquote><p> <code>thread.command</code>可以把多线程间复杂的消息交互伪装成普通的函数调用，非常的方便。</p></blockquote><p>这里新手仍然可能会困惑一点：我在工作线程中不是可以直接操作界面控件么？！ 你这个<code>thread.command</code>虽然好用，但是多写了不少代码呀。</p><p>这样去理解是不对的，你开个轮船去对象菜市场买菜固然是有点麻烦，但如果你开轮船去环游世界那你就能感受到它的方便在哪里了。<code>thread.command</code> 一个巨大的优势是让界面与逻辑完全解耦，实现界面与逻辑的完全分离，当你的程序写到后面，代码越来越多，就能感受到这种模式的好处了。</p><p>例如 aardio自带的自动更新模块的使用示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fsys.update.dlMgr;</span><br><span class="line"><span class="keyword">var</span> dlMgr = fsys.update.dlMgr(</span><br><span class="line">    <span class="string">"http://update.aardio.com/api/v1/version.txt"</span>,<span class="string">"/download/update-files"</span>)</span><br><span class="line"></span><br><span class="line">dlMgr.onError = <span class="function"><span class="keyword">function</span>(<span class="params">err,filename</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//错误信息 err,错误文件名 filename 这里可以不用做任何处理,因为出错了就是没有升级包了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dlMgr.onConfirmDownload = <span class="function"><span class="keyword">function</span>(<span class="params">isUpdated,appVersion,latestVersion,description</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( ! isUpdated )&#123;</span><br><span class="line">        <span class="comment">//已经是最新版本了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//检测到最新版本，版本号 latestVersion</span></span><br><span class="line">    &#125;;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">//暂不下载</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dlMgr.create();</span><br></pre></td></tr></table></figure><p>这个<code>fsys.update.dlMgr</code>里面就用到了多线程，但是他完全不需要直接操作界面控件。<br>而你在界面上使用这个对象的时候，你甚至都完全不用理会他是不是多线程，不会阻塞和卡死界面，有了结果你会收到通知，你接个电话就行了压根不用管他做了什么或者正在做什么。</p><p>这个<code>fsys.update.dlMgr</code>里面就是使用<code>thread.command</code>实现了实现界面与逻辑分离，你可以把检测、下载、更新替换并调整为不同的界面效果，但是<code>fsys.update.dlMgr</code>的代码可以始终复用。</p><h3 id="使用线程句柄"><a href="#使用线程句柄" class="headerlink" title="使用线程句柄"></a>使用线程句柄</h3><p>一般我们可以使用 <code>thread.invoke()</code> 函数简单快捷的创建线程，<br>而 <code>thread.create()</code> 的作用和用法与  <code>thread.invoke()</code> 一样，唯一的区别是 <code>thread.create()</code>会返回线程句柄。</p><p>线程句柄可以用来控制线程（暂停或继续运行等等），<br>如果不再使用线程句柄，应当使用 <code>raw.closehandle()</code> 函数关闭线程句柄（这个操作不会关停线程）</p><p>有了线程句柄，我们可以使用 <code>thread.waitOne()</code> 等待线程执行完毕，<br>而且 <code>thread.waitOne()</code> 还可以一边等待一边处理界面消息（让界面不会卡死）。</p><p>下面看一下aardio范例里的多线程入门示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thrdHandle = thread.create(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line">        thread.lock(<span class="string">"写控制台"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"线程在执行"</span>,thread.getId() )</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//这里如果高级点可以用 thread.event来实现信号判断,参考本目录下的定时器范例</span></span><br><span class="line">        <span class="keyword">while</span>(!thread.get(<span class="string">"红灯停"</span>))&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"线程在执行"</span>,time() )</span><br><span class="line">            sleep(<span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"停了!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">   </span><br><span class="line">thread.suspend(thrdHandle) <span class="comment">//使用线程句柄就可以控制线程,例如下面的函数暂停线程</span></span><br><span class="line">thread.resume(thrdHandle) <span class="comment">//线程恢复运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> act = thread.stillActive(thrdHandle) <span class="comment">//线程是否在运行</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//每个线程的全局变量环境都是独立的,而 thread.set() 则用于设置所有线程共享的全局变量。</span></span><br><span class="line">thread.set(<span class="string">"红灯停"</span>, <span class="literal">true</span>)</span><br><span class="line">thread.waitAll(thrdHandle)</span><br><span class="line"></span><br><span class="line"><span class="comment">//句柄不用的时候一定要用下面的函数关闭(切记：句柄是绝对不会自动释放的),关闭句柄并不会关闭线程</span></span><br><span class="line">raw.closehandle(thrdHandle)</span><br><span class="line">thread.invoke(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"线程在执行"</span>,thread.getId() )   </span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">sleep(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">console</span>.pause(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>您可以使用 thread.command 在线程间交互通信,请参考<a href="http://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=13121" target="_blank" rel="noopener">《多线程开发入门》</a><br>您还可以使用 thread.event 来实现线程间的同步,请参考<a href="http://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=11531" target="_blank" rel="noopener">《多线程中的交通信号灯：thread.event》</a><br>或者使用 <code>thread.works</code>、<code>thread.manage</code> 这些线程管理器来批量的管理线程句柄,<br>请参考此目录中的其他范例。</p><h3 id="管理多线程"><a href="#管理多线程" class="headerlink" title="管理多线程"></a>管理多线程</h3><p>aardio中提供了 <code>thread.manage</code>，<code>thread.works</code> 等用于管理多个线程的对象，<br>例如标准库中用于实现多线程多任务下载文件的 <code>thread.dlManager</code> 就使用了<code>thread.works</code>管理线程。</p><blockquote><p>thread.works 用于创建多线程任务分派，多个线程执行相同的任务，但可以不停的分派新的任务，</p></blockquote><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> thread.works;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> works = thread.works( <span class="number">20</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line">        </span><br><span class="line">        thread.lock(<span class="string">"写控制台"</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"线程ID"</span> + thread.getId(),<span class="string">",开始工作,接收到任务指令参数"</span>,...)</span><br><span class="line">        thread.unlock(<span class="string">"写控制台"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"返回值,线程ID"</span> + thread.getId();</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分派任务</span></span><br><span class="line">works.push(<span class="string">"一个任务"</span>)</span><br><span class="line">works.push(<span class="string">"两个任务"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待任务完成</span></span><br><span class="line">works.wait(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"检查成果"</span>, r  )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">works.push(<span class="string">"三个任务"</span>)</span><br><span class="line">works.push(<span class="string">"四个任务"</span>)</span><br><span class="line">works.push(<span class="string">"五个任务"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//退出程序前,等待任务完成并关闭所有线程</span></span><br><span class="line">works.waitClose(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( <span class="string">"检查成果"</span>, r  )</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">execute(<span class="string">"pause"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>而 <code>thread.manage</code> 可以用来创建多个线程执行多个不同的任务，可以添加任意个线程启动函数，<br>在线程执行完闭以后可以触发<code>onEnd</code>事件，并且把线程函数的返回值取回来，</p></blockquote><p>示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> thread.manage</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建线程管理器</span></span><br><span class="line">manage = thread.manage(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thrdFunc = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">import</span> win;</span><br><span class="line">    <span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;<span class="number">10</span>;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( thread.getId(),name )</span><br><span class="line">        <span class="keyword">if</span>( !win.delay(<span class="number">1000</span>) )&#123; <span class="comment">//主线程可以用 manage.quitMessage()中断这个循环</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"收到退出指令"</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">67</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manage.create(thrdFunc,<span class="string">"线程1"</span>).onEnd = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"线程1的回调"</span>,...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manage.createLite(thrdFunc,<span class="string">"线程2"</span>).onEnd = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"线程2的回调"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manage.create(thrdFunc,<span class="string">"线程3"</span>)</span><br><span class="line"></span><br><span class="line">manage.waitClose()</span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure><blockquote><p><code>thread.manage</code>通常是用于界面线程里管理工作线程，上面为了简化代码仅仅用到了控制台。</p></blockquote><h3 id="获取线程返回值"><a href="#获取线程返回值" class="headerlink" title="获取线程返回值"></a>获取线程返回值</h3><p>我们有时候在界面中创建一个线程，仅仅是为了让界面不卡顿，我们希望用 <code>thead.waitOne()</code> 阻塞等待线程执行完闭（界面线程同时可以响应消息），然后我们又希望在后面关闭线程句柄，并获取到线程最后返回的值。</p><p>可能我们希望一切尽可能的简单，尽可能的少写代码，并且也不想用到<code>thread.manage</code>（因为并不需要管理多个线程）。</p><p>这时候我们可以使用 <code>win.invoke</code>，<br><code>win.invoke</code> 的参数和用法与 <code>thread.invoke</code>完全一样，<br>区别是 <code>win.invoke</code> 会阻塞并等待线程执行完毕，并关闭线程句柄，同时获取到线程函数的返回值。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win.ui;</span><br><span class="line"><span class="keyword">var</span> winform = win.form(text=<span class="string">"aardio form"</span>;right=<span class="number">759</span>;bottom=<span class="number">469</span>)</span><br><span class="line">winform.add(</span><br><span class="line">    button=&#123;cls=<span class="string">"button"</span>;text=<span class="string">"读取网页"</span>;z=<span class="number">1</span>; ...&#125;;</span><br><span class="line">    edit=&#123;cls=<span class="string">"edit"</span>;text=<span class="string">"edit"</span>;edge=<span class="number">1</span>;multiline=<span class="number">1</span>;z=<span class="number">2</span>; ...&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = <span class="function"><span class="keyword">function</span>(<span class="params">id,event</span>)</span>&#123;</span><br><span class="line">    winform.edit.text = win.invoke(</span><br><span class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">import</span> inet.http;</span><br><span class="line">            sleep(<span class="number">3000</span>);<span class="comment">//暂停模拟一个耗时的操作</span></span><br><span class="line">            <span class="keyword">return</span> inet.http().get(<span class="string">"http://www.aardio.com"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><blockquote><p>代码运行测试一下，在线程执行完以前，你仍然可以流畅的拖动窗口，操作界面。</p></blockquote><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><blockquote><p>重视范例，才能开箱即用！</p></blockquote><p>教程中用到的多线程直接调用窗口对象的功能 - 需要更新到新版 aardio才能支持。<br>更多关于多线程的功能请大家看aardio范例和文档。</p><p>一些用户可能不明白 aardio怎样才能真正的“开箱即用”，我接触到的一些用户拿起aardio就可以直接使用，写出非常好的程序而且速度很快，他们高兴的表示aardio简洁轻巧不用特别的学习直接就可以使用，而另外一些却始终在犹豫，在到处找教程、找文档，始终找不到方法，每前进一步都要求你准备一大堆的说明书才敢向前迈一步，实际上我发现他们换其他编程工具也是类似的结果（ 可能有极少数学步车式的开发工具他们会适应 ）。</p><p>我也跟那些上手比较快的用户聊过一些，发现他们都有一个共同的习惯就是非常重视范例，<br>因为 aardio的范例非常、非常的多，而且aardio范例跟其他语言都有一些不同，很多代码就是几句代码就是一个简单而完整的程序，我经常听到一些人跟我说，仅仅是复制一些范例整合到一起，做一些修改就可以做出软件。</p><blockquote><p>所以请记住：教程写的再多，看的再多，始终是纸上谈兵。</p></blockquote><p>搞培训的人很愉快因为能赚到钱，而参加培训的人也很愉快因为找到了心理安慰剂，但真正能让你学会编程的是多看范例，多跑代码，多动手写代码！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;当你点击EXE文件系统一个应用程序的时候 - 系统会创建一个进程（process）&lt;br&gt;而在一个进程内可以包含多个线程(thread)。用来显示界面的线程，我们通常称为“界面线程”，&lt;br&gt;其他不是用来显示界面的线程，我们一般称为“工作线程”或者是“后台线程”。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
  </entry>
  
  <entry>
    <title>AArdio 调用Go语言</title>
    <link href="http://suiang.cn/posts/48288/"/>
    <id>http://suiang.cn/posts/48288/</id>
    <published>2020-09-12T05:42:00.000Z</published>
    <updated>2021-01-12T22:16:48.151Z</updated>
    
    <content type="html"><![CDATA[<p>go语言自带的jsonrpc 不支持http/websocket，而是使用tcp协议，<br>aardio中增加了一个库 wsock.tcp.jsonClient 支持与go语言进行jsonrpc调用。</p><a id="more"></a><p>先使用go语言编写一个exe文件（ 当然你可以把后缀名改为 dll，下面的代码一样可以运行 ）<br>go语言代码如下，注意 go里面{换行写是语法错误 ：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"net/rpc"</span></span><br><span class="line">    <span class="string">"net/rpc/jsonrpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Args <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> listener net.Listener</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Calculator <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Calculator)</span> <span class="title">Add</span><span class="params">(args *Args, reply *<span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    *reply = args.X + args.Y</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Calculator)</span> <span class="title">Exit</span><span class="params">(args *<span class="keyword">int</span>, reply *<span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    listener.Close()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    cal := <span class="built_in">new</span>(Calculator)</span><br><span class="line">    server := rpc.NewServer()</span><br><span class="line">    server.Register(cal)</span><br><span class="line"></span><br><span class="line">    listener, e := net.Listen(<span class="string">"tcp"</span>, <span class="string">"localhost:0"</span>)</span><br><span class="line">    <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"error:%s\n"</span>, e)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%s\n"</span>, listener.Addr().String())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> conn, err := listener.Accept(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(<span class="string">"error: "</span> + err.Error())</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">go</span> server.ServeCodec(jsonrpc.NewServerCodec(conn))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设上面用go语言生成的exe文件名为gotest.exe，并且是放在当前工程目录下，然后我们用下面的 aardio 代码调用这个 gotest.exe 里的go函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win.ui;</span><br><span class="line"><span class="comment">/*DSG&#123;&#123;*/</span></span><br><span class="line"><span class="keyword">var</span> winform = win.form(text=<span class="string">"aardio调用go语言演示"</span>;right=<span class="number">759</span>;bottom=<span class="number">469</span>)</span><br><span class="line">winform.add(</span><br><span class="line">button=&#123;cls=<span class="string">"button"</span>;text=<span class="string">"调用Go语言的Calculator.Add函数"</span>;left=<span class="number">382</span>;top=<span class="number">389</span>;right=<span class="number">678</span>;bottom=<span class="number">427</span>;z=<span class="number">5</span>&#125;;</span><br><span class="line">edit=&#123;cls=<span class="string">"edit"</span>;left=<span class="number">19</span>;top=<span class="number">12</span>;right=<span class="number">732</span>;bottom=<span class="number">352</span>;edge=<span class="number">1</span>;hscroll=<span class="number">1</span>;multiline=<span class="number">1</span>;vscroll=<span class="number">1</span>;z=<span class="number">1</span>&#125;;</span><br><span class="line">editX=&#123;cls=<span class="string">"edit"</span>;text=<span class="string">"2"</span>;left=<span class="number">109</span>;top=<span class="number">392</span>;right=<span class="number">185</span>;bottom=<span class="number">424</span>;edge=<span class="number">1</span>;z=<span class="number">2</span>&#125;;</span><br><span class="line">editY=&#123;cls=<span class="string">"edit"</span>;text=<span class="string">"3"</span>;left=<span class="number">238</span>;top=<span class="number">392</span>;right=<span class="number">320</span>;bottom=<span class="number">420</span>;edge=<span class="number">1</span>;z=<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">static</span>=&#123;cls=<span class="string">"static"</span>;text=<span class="string">"+"</span>;left=<span class="number">198</span>;top=<span class="number">395</span>;right=<span class="number">230</span>;bottom=<span class="number">420</span>;align=<span class="string">"center"</span>;transparent=<span class="number">1</span>;z=<span class="number">4</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/*&#125;&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wsock.tcp.jsonClient;</span><br><span class="line"><span class="keyword">import</span> process.popen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gotest.exe是使用go语言编写的exe文件。</span></span><br><span class="line"><span class="keyword">var</span> gofile = process.popen(<span class="string">"/gotest.exe"</span>);</span><br><span class="line"><span class="keyword">if</span>(!gofile) <span class="keyword">return</span> winform.msgbox(<span class="string">"启动go程序失败"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取服务端地址(使用自动分配的空闲端口避免冲突)</span></span><br><span class="line"><span class="keyword">var</span> url = gofile.read();</span><br><span class="line"><span class="keyword">if</span>( !url || string.startWith(url,<span class="string">"error:"</span>)  ) <span class="keyword">return</span> winform.msgbox(<span class="string">"启动go程序失败"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接go语言服务端</span></span><br><span class="line"><span class="keyword">var</span> go = wsock.tcp.jsonClient(url)</span><br><span class="line">winform.edit.print(<span class="string">"已连接到go程序"</span>,url);</span><br><span class="line"></span><br><span class="line">winform.button.oncommand = <span class="function"><span class="keyword">function</span>(<span class="params">id,event</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//调用go语言提供的函数</span></span><br><span class="line">    <span class="keyword">var</span> rep = go.Calculator.Add(&#123;</span><br><span class="line">        X = tonumber(winform.editX.text);</span><br><span class="line">        Y = tonumber(winform.editY.text);</span><br><span class="line">    &#125; )</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">if</span>( rep[[<span class="string">"result"</span>]] )&#123;  </span><br><span class="line">        winform.edit.print( <span class="string">"调用成功"</span>, rep.result )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        winform.edit.print( rep[[<span class="string">"error"</span>]] )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">winform.show()</span><br><span class="line">win.loopMessage();</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知go程序退出</span></span><br><span class="line">go.Calculator.Exit(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>附：调用Go语言编译器例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> golang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> go = golang();</span><br><span class="line"></span><br><span class="line">go.runCode(<span class="string">"/hello.go"</span>,<span class="string">`</span></span><br><span class="line"><span class="string">package main</span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">    fmt.Println("hello world")</span></span><br><span class="line"><span class="string">&#125;`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure><p>最新版golang扩展库已支持自动下载配置Go编译器。<br>Go最新版已经支持调用生成DLL文件（需要调用gcc），在aardio中可以直接调用Go生成的DLL文件（使用cdecl调用约定），下面是调用Go编译器生成DLL的演示。  </p><p>下面看演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> golang;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Go编译器</span></span><br><span class="line"><span class="keyword">var</span> go = golang();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Go源码与字符串都是UTF-8编码，跟aardio一样很方便</span></span><br><span class="line">string.save(<span class="string">"/hello.go"</span>,<span class="string">`</span></span><br><span class="line"><span class="string">package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "C"</span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//export SayHello</span></span><br><span class="line"><span class="string">func SayHello(name string) &#123;</span></span><br><span class="line"><span class="string">    fmt.Printf("Go says: %s!\n", name)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">   //DLL入口函数,没有也要写个空的</span></span><br><span class="line"><span class="string">&#125; `</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译Go源码生成DLL文件</span></span><br><span class="line">go.buildShared(<span class="string">"/hello.go"</span>,<span class="string">"/hello.dll"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载Go编译的DLL，注意要指定cdecl调用约定</span></span><br><span class="line"><span class="keyword">var</span> dll = raw.loadDll(<span class="string">"/hello.dll"</span>,,<span class="string">"cdecl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接就可以调用DLL里的函数，不用声明</span></span><br><span class="line"><span class="built_in">console</span>.open();</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"必须在Go函数名前面加上 export 函数名的注释才能导出函数"</span>;</span><br><span class="line">dll.SayHello(str,#str);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( n )</span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure><blockquote><p>Go写DLL要注意一个特别的地方，Go导出函数前必须写一行注释声明导出函数，例如上面的 //export SayHello</p></blockquote><p>Go语言里的字符串GoString是一个结构体，用aardio来表示是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goString</span></span>&#123;</span><br><span class="line">    ctor( str )&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = str;</span><br><span class="line">        this.n = #str;</span><br><span class="line">    &#125;;</span><br><span class="line">    string s;</span><br><span class="line">    addr n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是在API函数里传值，一个GoString展开为2个API参数来表示就可以了（一个字符串，后面跟一个字符串长度）</p><p>因为aardio传结构体都是传指针，如果用结构体，在Go里面要声明为指针，示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> golang;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Go编译器</span></span><br><span class="line"><span class="keyword">var</span> go = golang();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Go源码与字符串都是UTF-8编码，跟aardio一样很方便</span></span><br><span class="line">string.save(<span class="string">"/hello.go"</span>,<span class="string">`</span></span><br><span class="line"><span class="string">package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "C"</span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//export SayHello</span></span><br><span class="line"><span class="string">func SayHello(name *string) &#123;</span></span><br><span class="line"><span class="string">    fmt.Printf("Go says: %s!\n", *name)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">   //DLL入口函数,没有也要写个空的</span></span><br><span class="line"><span class="string">&#125; `</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//编译Go源码生成DLL文件</span></span><br><span class="line">go.buildShared(<span class="string">"/hello.go"</span>,<span class="string">"/hello.dll"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载Go编译的DLL，注意要指定cdecl调用约定</span></span><br><span class="line"><span class="keyword">var</span> dll = raw.loadDll(<span class="string">"/hello.dll"</span>,,<span class="string">"cdecl"</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">goString</span></span>&#123;</span><br><span class="line">    ctor( str )&#123;</span><br><span class="line">        <span class="keyword">this</span>.s = str;</span><br><span class="line">        this.n = #str;</span><br><span class="line">    &#125;;</span><br><span class="line">    string s;</span><br><span class="line">    addr n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接就可以调用DLL里的函数，不用声明</span></span><br><span class="line"><span class="built_in">console</span>.open();</span><br><span class="line">dll.SayHello( goString( <span class="string">"必须在Go函数名前面加上 export 函数名的注释才能导出函数"</span>) );</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( n )</span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure><blockquote><p>需要先安装MinGW( GCC )</p></blockquote><p>可以下载安装 MinGW-W64: <a href="https://sourceforge.net/projects/mingw-w64" target="_blank" rel="noopener">https://sourceforge.net/projects/mingw-w64</a> 这个只能安装在64位系统。<br>也可以下载安装 TDM-GCC: <a href="http://tdm-gcc.tdragon.net/download" target="_blank" rel="noopener">http://tdm-gcc.tdragon.net/download</a> 这个提供支持32位、64位安装包。  </p><p>golang扩展库会自动搜索MinGW,MinGW-W64,TDM-GCC的安装位置，不需要手动配置。<br>当然也可以调用golang扩展库提供的addPath函数自己添加gcc.exe所在的目录。  </p><p>Go生成的文件很大，加上<code>-ldflags &quot;-s -w&quot;</code>参数会小一些，<code>go.buildShared()</code> 已经自动加上这些参数。<br>编译上面的代码生成的DLL只有1MB多一点，而且可以支持WinXP，不需要依赖外部运行库，还是非常不错的。<br>而且测试了一下，编译的DLL还能内存加载。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go语言自带的jsonrpc 不支持http/websocket，而是使用tcp协议，&lt;br&gt;aardio中增加了一个库 wsock.tcp.jsonClient 支持与go语言进行jsonrpc调用。&lt;/p&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
      <category term="Golang" scheme="http://suiang.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>使用 web.rest 调用 REST API</title>
    <link href="http://suiang.cn/posts/11315/"/>
    <id>http://suiang.cn/posts/11315/</id>
    <published>2020-07-14T11:23:00.000Z</published>
    <updated>2021-01-12T22:15:17.642Z</updated>
    
    <content type="html"><![CDATA[<p><code>web.rest</code>下面的支持库最简单的用法就是作为一个 HTTP客户端使用，该客户端对象简化了<code>get</code>,<code>post</code>,<code>put</code>,<code>patch</code>,<code>delete</code> 等常用的 HTTP请求操作，并提供编码请求数据、解码返回数据的功能。</p><a id="more"></a><p>标准库中用于调用 REST API 的库：</p><ul><li><code>web.rest.client</code> 请求参数使用urlencode编码,服务器返回文本数据。</li><li><code>web.rest.xmlClient</code> 请求参数使用urlencode编码,服务器返回xml格式数据。 </li><li><code>web.rest.jsonLiteClient</code> 请求参数使用urlencode编码,服务器返回JSON格式数据。</li><li><code>web.rest.jsonClient</code> 请求参数与服务器返回数据都使用JSON格式。</li></ul><blockquote><p>除了与服务器交互的数据格式不同以外, 这几个库的接口用法完全一样，可以看看这几个库的源码实际上他们都是调用 web.rest.client 这一个库。</p></blockquote><h2 id="基本的-HTTP-请求"><a href="#基本的-HTTP-请求" class="headerlink" title="基本的 HTTP 请求"></a>基本的 HTTP 请求</h2><p>web.rest下面的支持库最简单的用法就是作为一个HTTP客户端使用，该客户端对象简化了<code>get</code>,<code>post</code>,<code>put</code>,<code>patch</code>,<code>delete</code>等常用的HTTP请求操作，并提供编码请求数据、解码返回数据的功能，下面是一个最简单的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> web.rest.jsonLiteClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> restClient = web.rest.jsonLiteClient();</span><br><span class="line"><span class="keyword">var</span> jsonData = restClient.post(<span class="string">"http://httpbin.org/post"</span>, &#123;</span><br><span class="line">    用户名 = <span class="string">"用户名"</span>;</span><br><span class="line">    密码 = <span class="string">"密码"</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dumpJson(jsonData)</span><br><span class="line"><span class="built_in">console</span>.pause(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>从上面的示例可以看出，我们上传参数的是<code>aardio</code>中的对象，返回的数据也被自动解码为<code>aardio</code>对象，虽然 HTTP传输使用的是 <code>JSON</code> 数据，但使用时不需要去管 <code>JSON</code> 的编解码等一系列的操作。</p><h2 id="转换为-AArdio-函数"><a href="#转换为-AArdio-函数" class="headerlink" title="转换为 AArdio 函数"></a>转换为 AArdio 函数</h2><p><code>web.rest</code> 不仅仅可以用来做上面这些简单的 HTTP请求、以及编解码的操作，他还可以将基本符合 REST风格的 Web API转换为<code>aardio</code>中的函数对象，这非常有意思，REST本身不是一个严格的规范、更缺乏<code>WebService</code>那样的<code>WSDL</code>接口描述服务，但是<code>aardio</code>设计了一种简单可行的声明语法，可以非常方便的把混乱的 Web API转换为统一的 aardio函数。</p><p>首先我们看一下 REST API的 URL 一般会是这种格式 <a href="#">http://主机/资源目录名/资源目录名/资源名</a><br><code>aardio</code>的<code>web.rest</code>库模块中的客户端对象提供一个 api 函数用于声明一个API接口，api 函数的定义如下：</p><p><code>var restApi = restClient.api(&quot;接口URL描述&quot;,&quot;默认HTTP请求动词&quot;)</code></p><p>其中接口URL描述可以直接指定一个web api的网址，在该网址中还可以使用变量，变量放在花括号中，例如：<a href="#">http://主机/{变量名}/资源目录名/资源名</a> <code>aardio</code>并不关心变量名的内容是什么，只关心它们出现的前后顺序，当调用<code>restApi</code>的成员函数时会使用函数名替换接口 URL 中的变量生成新的请求URL。</p><p>下面是一个简单的示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> web.rest.jsonClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建REST客户端</span></span><br><span class="line"><span class="keyword">var</span> restClient = web.rest.jsonClient();</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个API接口,第一个参数指定URL描述</span></span><br><span class="line"><span class="keyword">var</span> restApi = restClient.api(<span class="string">"http://httpbin.org/api/&#123;program&#125;/&#123;lang&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面调用接口函数，</span></span><br><span class="line"><span class="comment">在请求时下面代码中的接口名"language"替换接口URL描述中的变量&#123;program&#125;</span></span><br><span class="line"><span class="comment">接口名"aardio"则替换接口URL描述中的变量&#123;lang&#125;</span></span><br><span class="line"><span class="comment">最后生成的请求URL为 http://httpbin.org/api/language/aardio </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> result = restApi.language.aardio()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"请求的URL"</span>, restClient.lastRequestUrl)</span><br><span class="line">restClient.lastResponse(); <span class="comment">//输出服务端最后返回的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure></p><p>接口 URL中连接的变量名还可以合并为<code>{...}</code><br>例如  <code>http://httpbin.org/api/{program}/{lang}</code> 可以简写为 <code>http://httpbin.org/api/{...}</code><br>当 <code>{...}</code> 出现在尾部时还可以直接省略，例如 <code>http://httpbin.org/api/</code></p><blockquote><p>注意head,get,post,put,patch,delete等默认的HTTP请求操作作为函数名时不会被添加到生成的URL中。</p></blockquote><p>这些默认的HTTP方法名在 <code>web.rest.client._defaultMethod</code> 中指定，例如使用 <code>restApi.language.get()</code> 显示的指定 HTTP请求动词为<code>GET</code>。如果不指定 HTTP请求动词，则使用调用 <code>restClient.api(&quot;接口URL描述&quot;,&quot;默认HTTP请求动词&quot;)</code> 函数时第二个参数指定的 HTTP请求动词，不指定该参数时默认为<code>POST</code>。</p><p>HTTP规定了九种动词<code>（Verbs）</code>用于指定请求方法：<code>GET</code>,<code>HEAD</code>,<code>POST</code>,<code>DEBUG</code>,<code>PUT</code>,<code>DELETE</code>,<code>PATCH</code>,<code>OPTIONS</code>，<br>而在<code>REST API中</code>用到的有五种 <code>GET</code>，<code>POST</code>，<code>PUT</code>，<code>DELETE</code>，<code>PATCH</code>，他们的用途如下：</p><ul><li><code>GET</code>：用于获取数据</li><li><code>POST</code>:  用于创建数据 </li><li><code>PUT</code>: 用于替换数据、也可用于更新数据</li><li><code>DELETE</code>: 用于删除数据</li><li><code>PATCH</code>：用于更新数据</li></ul><h2 id="上传下载文件"><a href="#上传下载文件" class="headerlink" title="上传下载文件"></a>上传下载文件</h2><p>如果一个REST API在请求时需要上传、下载文件，那么所有调用规则如前不变。<br>你仅仅需要做的是，在调用API以前指定接受、或发送文件的回调函数以获取上传、下载的进度。</p><p>上传文件示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">restClient.sendFile( <span class="string">"上传文件路径"</span> </span><br><span class="line">    ,<span class="function"><span class="keyword">function</span>(<span class="params">str,sendSize,contentLength</span>)</span>&#123;</span><br><span class="line">        ..io.print(<span class="string">"正在上传"</span>,sendSize,contentLength);</span><br><span class="line">    &#125;</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">//在后面再简单的调用API就可以了，例如</span></span><br><span class="line">restApi.upload()</span><br></pre></td></tr></table></figure><p>下载文件示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">restClient.receiveFile( <span class="string">"上传文件路径"</span> </span><br><span class="line">    , <span class="function"><span class="keyword">function</span>(<span class="params">str,receiveSize,contentLength</span>)</span>&#123;</span><br><span class="line">        ..io.print(<span class="string">"正在下载"</span>,receiveSize,contentLength);</span><br><span class="line">    &#125;</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">//在后面再简单的调用API就可以了，例如</span></span><br><span class="line">restApi.download()</span><br></pre></td></tr></table></figure><p><code>web.rest</code> 也可以支持 <code>multipart/form-data</code> 编码上传文件，示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>; </span><br><span class="line"><span class="keyword">import</span> web.rest.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = web.rest.client(); </span><br><span class="line">http.sendMultipartForm( &#123;</span><br><span class="line">        file = <span class="string">"@d:\文件路径"</span>; </span><br><span class="line">        username = <span class="string">"测试"</span>;</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">str,sendSize,contentLength</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"正在上传"</span>,sendSize,contentLength);</span><br><span class="line">    &#125; </span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> str =http.post(<span class="string">"http://httpbin.org/post"</span>) </span><br><span class="line"><span class="built_in">console</span>.pause(,str)</span><br></pre></td></tr></table></figure><h2 id="客户端对象的错误处理"><a href="#客户端对象的错误处理" class="headerlink" title="客户端对象的错误处理"></a>客户端对象的错误处理</h2><p><code>web.rest</code> 客户端对象的错误处理与<code>inet.http</code>相同：<br>请求成功返回服务器数据，失败返回空值,错误信息，错误代码等。</p><blockquote><p>注意下面为了演示所有的细节，代码写的比较长，实际开发中不必要写的这么细</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> web.rest.jsonLiteClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> restClient = web.rest.jsonLiteClient();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">web.rest客户端对象所以执行HTTP请求的函数遵守以下规则：</span></span><br><span class="line"><span class="comment">如果成功:</span></span><br><span class="line"><span class="comment">则第一个返回值jsonData为服务端返回数据解码并创建的aardio对象。</span></span><br><span class="line"><span class="comment">在HTTP请求遇到错误时:</span></span><br><span class="line"><span class="comment">第一个返回值jsonData为空，</span></span><br><span class="line"><span class="comment">第二个返回值errMsg为错误信息,</span></span><br><span class="line"><span class="comment">返回值errCode为错误代码</span></span><br><span class="line"><span class="comment">一般我们可以省略errMsg，errCode这两个返回值不用写，</span></span><br><span class="line"><span class="comment">直接判断返回值是否为空即可。  </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonData, errMsg, errCode = restClient.post(<span class="string">"http://httpbin.org/post"</span>, &#123;</span><br><span class="line">    用户名 = <span class="string">"用户名"</span>;</span><br><span class="line">    密码 = <span class="string">"密码"</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//jsonData非空为请求成功</span></span><br><span class="line"><span class="keyword">if</span> (jsonData) &#123;</span><br><span class="line">    <span class="built_in">console</span>.dumpJson(jsonData);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    出错了，如果restClient.lastStatusCode非空则说明服务端返回了HTTP状态代码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (restClient.lastStatusCode) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(restClient.lastStatusMessage()) <span class="comment">//查看该状态码的说明</span></span><br><span class="line">        restClient.lastResponse() <span class="comment">//输出服务端最后返回的信息</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//这通常是没有成功发送请求，在请求到达服务器以前就出错了</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"HTTP请求遇到错误,WinInet错误代码："</span>, errCode)</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">            <span class="string">'关于WinInet错误代码的详细说明：\n</span></span><br><span class="line"><span class="string">            http: //support.microsoft.com/kb/193625'</span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure><p>当然上面的代码一般在调试故障时才需要，一般没必要把错误处理写的这么细，上面的代码也可以简化如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> web.rest.jsonLiteClient;</span><br><span class="line"><span class="keyword">var</span> restClient = web.rest.jsonLiteClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 鸭子 = restClient.post(<span class="string">"http://httpbin.org/post"</span>, &#123;</span><br><span class="line">    用户名 = <span class="string">"用户名"</span>;</span><br><span class="line">    密码 = <span class="string">"密码"</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (鸭子[[<span class="string">"翅膀"</span>]]) &#123; <span class="comment">//这句相当于 if( 鸭子 and 鸭子.翅膀 )</span></span><br><span class="line">    io.print(<span class="string">"不管服务器给我的是什么鸭子，总之有翅膀的都是好鸭子"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    我的网络错误处理模块.错误统一分析(</span></span><br><span class="line"><span class="comment">    "怎么回事没翅膀还能叫鸭子吗？"</span></span><br><span class="line"><span class="comment">    , restClient.lastStatusCode )</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>, <span class="string">"网络错误"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务端接口设计原则"><a href="#服务端接口设计原则" class="headerlink" title="服务端接口设计原则"></a>服务端接口设计原则</h2><p>本文参考了 REST API的设计风格、但有部分规则有所变通。在实践中 REST API 完全符合REST规则的比较少见，我在设计 web.rest.client 试图编写一个尽可能通用的支持库、但是发现REST API的实现真是五花八门，而且也缺乏一个统一的接口描述规则。 </p><p>如果你需要为你的aardio客户端程序设计自己的Web API，那么参考下面的几条原则去实现服务端接口 - 这可以让标准库里 web.rest.client 方便的支持该API( 请参考：<a href="http://bbs.aardio.com/forum.php?mod=viewthread&amp;tid=11218" target="_blank" rel="noopener">使用 web.rest 调用 REST API</a>  ).</p><h3 id="资源定位路径"><a href="#资源定位路径" class="headerlink" title="资源定位路径"></a>资源定位路径</h3><p>URL应用于清晰的展现资源定位路径，目录应当使用清晰的资源名称，并可以使用统一的URL接口描述语法声明该API。</p><p>例如：<a href="#">http://主机/资源分类/资源目录/资源名/资源ID</a> 原则上不应当把资源名放在URL参数里，</p><p>但是要使用这样的友好URL在现实中是用一定代价的，对于一般的Web服务器这可能需URL重写,有一定的性能负担。所以也可以将资源名放到URL参数里，例如 <a href="#">HTTP://主机/资源分类?资源目录=目录名&amp;资源名=资源名&amp;资源ID=资源ID</a> 要注意这里的资源定位有关的参数应当直接放到URL的参数里也就是?号后面，要将资源定位的参数与HTTP提交的参数分开来( 如果你用过 <code>web.rest.client</code> 就知道为什么要这样做 )，并且要按资源定位关系决定参数出现的先后关系。</p><p>最后生成的URL要能使用以下的URL描述规则:<br>URL中的资源名应当能使用<code>{模板变量}</code>代替、<code>{模板变量}</code>的先后关系应当对应资源名的出现顺序。<code>{模板变量}</code>包含在花括号里 - 可以使用多个数字或字母，数值的大小并不重要，URL描述仅关心资源出现的先后关系。可以使用 <code>{...}</code> 表示不定个数的模板变量。</p><p><a href="#">http://主机/资源分类/资源目录/资源名/资源ID</a> 使用URL描述语法转换结果就是这样： <a href="#">http://主机/{res}/{category}/{name/{id}</a> 也可以使用 <a href="#">http://主机/{res}/{…}</a> 表示。如果 <code>{...}</code> 出现在最后则可以省略</p><p><a href="#">HTTP://主机/资源分类?资源目录=目录名&amp;资源名=资源名&amp;资源ID=资源ID</a><br>使用URL描述语法转换以后： <a href="#">HTTP://主机/{res}?资源目录={category}&amp;资源名={name}&amp;资源ID={id}</a></p><p>可以看到资源名是不是写到参数里都能清晰的展现资源定位，要注意 Web API 并不是浏览器，URL并不会出现在浏览器的地址栏，设计一个友好的 API URL 重要的是编程语言里能不能更好的理解并自动分析转换。 例如<code>aardio</code>中的 <code>web.rest.client</code> 就按照这种 URL 描述语法自动的将 URL 描述转换为<code>aardio</code>中的函数对象。</p><h3 id="不包含动词"><a href="#不包含动词" class="headerlink" title="不包含动词"></a>不包含动词</h3><p>原则上URL不应当包含动词，使用HTTP协议的指令动词表示要执行的操作:</p><blockquote><p>GET: 表示获取资源<br>POST: 表示新增数据<br>PUT: 表示替换数据<br>DELETE: 表示删除数据<br>PATCH: 表示更新数据</p></blockquote><p>一般的Web服务器因为安全方面的考虑对HEAD、GET、POST之外的请求有所限制, 很多API用POST替代PUT,DELETE的功能，而又要做到URL中不出现动词，就背离了REST的初衷了。</p><p>因此建议可选在URL资源定位的最可选性的添加扩展的操作动词，例如：<br><a href="#">http://host/group/user/userid/</a> 使用get读取用户信息<br><a href="#">http://host/group/user/userid/password/change</a> 使用扩展的change方法修改用户密码</p><p>如果按这种规则实现服务端的API，那么在aardio里用 web.rest.client 调用起来就很方便，示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> web.rest.jsonClient;</span><br><span class="line"><span class="keyword">var</span> client = web.rest.jsonClient()</span><br><span class="line"><span class="keyword">var</span> api = client.api(<span class="string">"http://host/&#123;group&#125;/&#123;..&#125;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// GET方法读取用户信息</span></span><br><span class="line"><span class="keyword">var</span> userInfo = api.xgroup.user[userId].get()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用扩展的change方法修改密码</span></span><br><span class="line">api.xgroup.user[userId].passord.change(</span><br><span class="line">    pwd = <span class="string">"旧密码"</span>; </span><br><span class="line">    newPwd = <span class="string">"新密码"</span>;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>为什么不直接在每一个请求里写具体的URL呢？要考虑到实现一个API的扩展库，API服务端的地址可能发生变更，使用上面的方法就可以简单的维护一个声明URL参数即可。</p><h3 id="不出现文件后缀名"><a href="#不出现文件后缀名" class="headerlink" title="不出现文件后缀名"></a>不出现文件后缀名</h3><p>Web API 的URL中不应出现文件后缀名：<br>例如： <a href="#">http://host/x/y.php</a> 应当在服务器上移动到 <a href="#">http://host/x/y/index.php</a> ，然后提供给客户端的API应隐藏默认的文档名，即 <a href="#">http://host/x/y/</a> 这样的好处是服务端变更实现会非常方便。</p><h3 id="不出现-IP-地址"><a href="#不出现-IP-地址" class="headerlink" title="不出现 IP 地址"></a>不出现 IP 地址</h3><p>Web API 的URL中不应出现IP地址，即使是测试期间，也应尽可能的使用域名替代IP地址。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;web.rest&lt;/code&gt;下面的支持库最简单的用法就是作为一个 HTTP客户端使用，该客户端对象简化了&lt;code&gt;get&lt;/code&gt;,&lt;code&gt;post&lt;/code&gt;,&lt;code&gt;put&lt;/code&gt;,&lt;code&gt;patch&lt;/code&gt;,&lt;code&gt;delete&lt;/code&gt; 等常用的 HTTP请求操作，并提供编码请求数据、解码返回数据的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
      <category term="Web" scheme="http://suiang.cn/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>不声明直接调用 API 函数</title>
    <link href="http://suiang.cn/posts/35919/"/>
    <id>http://suiang.cn/posts/35919/</id>
    <published>2020-05-28T14:18:00.000Z</published>
    <updated>2021-01-12T22:13:59.187Z</updated>
    
    <content type="html"><![CDATA[<p>一般建议不要先声明API再去调用，直接调用更方便也更节省资源(除非有特殊的数据类型必须通过声明API来指定)。</p><a id="more"></a><p>示例： </p><p> <code>::User32.MessageBox(0,&quot;测试&quot;,&quot;标题&quot;,0)</code></p><h2 id="添加参数的规则"><a href="#添加参数的规则" class="headerlink" title="添加参数的规则"></a>添加参数的规则</h2><ol><li><p>调用约定在加载DLL的参数中指定,支持cdecl不定个数参数,有很多API根据不同的用法可以传入不同类型的参数， 如果我们在aardio中不是先写一个API声明，而是直接去调用API，这时候就可以根据需要更灵活的改变参数类型。一般建议不要先声明API再去调用 - 直接调用更方便也更节省资源(除非有特殊的数据类型必须通过声明API来指定)。 </p></li><li><p>null参数不可省略 </p></li><li><p>数值参数一律处理为32位int整型，32位整数类型，小于32位的整数、枚举类型、8位或32位bool值都跟int 32位数值兼容，可以直接写在参数里,示例：</p></li></ol><blockquote><p>32位整型以及小于32位的整型参数都可以直接传入aardio数值。<br>例如C语言API声明为：<code>void setNumber( short n )</code><br>在aardio里如下调用就可以 <code>dll.setNumber( 123 )</code></p></blockquote><ol start="4"><li><p>64位整数（C语言中的long long)可以math.size64对象表示，或者用两个数值参数表示一个64位整数值参数，其中第一个参数表示低32位数值,第二个参数表示高32位数值（一般可以直接写0）。 </p></li><li><p>对于任何数值类型的指针（输出参数）一律使用结构体表示，<br>例如C语言API声明为：<code>void getNumber( short *n )</code> 在aardio里如下调用就可以</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = &#123; word value &#125;</span><br><span class="line">dll.getNumber(n)</span><br></pre></td></tr></table></figure><ol start="6"><li><p>API函数中的数组指针，在<code>aardio</code>中可以使用结构体指针替代，例如C语言中的 <code>int data[4];</code> 在aardio中写为 <code>{int data[4];}</code> 如果是字节数组指针也可以使用<code>raw.buffer()</code>函数创建的字节数组替代。 </p></li><li><p>所有结构体一律处理为输出参数并在<code>aardio</code>返回值中返回，其他类型只能作为输入参数。注意在<code>aardio</code>中，任何结构体在API调用中传递的都是结构体指针（传址）。 </p></li><li><p>因为没有参数类型声明，调用代码有责任事先检查并保证参数类型正确，传入错误的参数可能导致程序异常。 </p></li></ol><h2 id="获取返回值的规则"><a href="#获取返回值的规则" class="headerlink" title="获取返回值的规则"></a>获取返回值的规则</h2><ol><li><p>直接调用API的 返回值默认为<code>int</code>类型 </p></li><li><p>可以使用<code>[API尾标]</code>改变返回值为其他类型 </p></li><li><p>未声明的 API函数自身在<code>aardio</code>中是一个普通的<code>aardio</code>函数对象，不能作为函数指针参数传给 API参数（声明后的API函数对象是可以的） </p></li></ol><h2 id="使用-API-尾标"><a href="#使用-API-尾标" class="headerlink" title="使用 [ API 尾标 ]"></a>使用 [ API 尾标 ]</h2><p>当不声明直接调用API时，API函数名尾部如果不是大写字符，则可以使用一个大写的特定字符（API尾标）修改默认的API调用规则，在API函数名后添加尾标，不会影响到查找API函数的结果，无论真实的API带不带指定的尾标 - aardio都能找到真实的函数。 所有可用的[API尾标]如下（函数名的最后一个特定字符是尾标）：</p><blockquote><p><code>dll.ApiNameW()</code> 切换到<code>Unicode</code>版本，字符串<code>UTF8</code><-><code>UTF16</code>双向转换<br><code>dll.ApiNameA()</code> 切换到<code>ANSI</code>版本,字符串不作任何转换<br><code>dll.ApiNameL()</code> 返回值为64位<code>LONG</code>类型<br><code>dll.ApiNameP()</code> 返回值为指针类型<br><code>dll.ApiNameD()</code> 返回值为<code>double</code>浮点数<br><code>dll.ApiNameF()</code> 返回值为<code>float</code>浮点数<br><code>dll.ApiNameB()</code> 返回值为 C++ 中的8位<code>bool</code>类型</-></p></blockquote><h2 id="如何使用字符串"><a href="#如何使用字符串" class="headerlink" title="如何使用字符串"></a>如何使用字符串</h2><ol><li><p>字符串一般直接转换为字符串指针，<code>buffer</code>类型字节数组也可以作为字符串指针使用，如果API需要向字符串指向的内存中写入数据，那么必须使用<code>raw.buffer()</code>函数创建定长的字节数组。普通的<code>aardio</code>字符串指向的内存是禁止写入的（<code>aardio</code>中修改普通字符串会返回新的字符串对象，而不是在原内存上修改数据） </p></li><li><p>对于非<code>Unicode</code> API字符串直接输入原始的数据（对于文本就是UTF8编码），对于声明为<code>Unicode</code>版本的API，字符串会被强制转换为<code>Unicode(UTF16)</code>，但<code>buffer</code>类型的参数仍然会以二进制方式使用原始数据与API交互（不会做文本编码转换）</p><ul><li><p>可以在 <code>raw.loadDll()</code> 加载 DLL时在调用约定中添加<code>,unicode</code>声明一个 DLL默认使用<code>Unicode API</code>。</p></li><li><p>也可以在函数名后添加尾标 <code>W</code> 声明一个<code>Unicode API</code>, 即使真实的API函数名后面并没有 <code>W</code> 尾标，你仍然可以添加 <code>W</code> 尾标调用 API。<code>aardio</code>在找不到该 API函数时，会移除 <code>W</code> 尾标，并且认为该 API函数是一个<code>Unicode API</code>，注意 <code>W</code> 必须大写并紧跟在小写字母后面。</p></li><li><p>直接调用 API时，如果目标 API函数并不存在，而是存在加 <code>W</code> 尾标的<code>Unicode API</code>,<code>aardio</code>将会自动切换到<code>Unicode API</code>，并在调用函数时，自动将<code>aardio</code>的<code>UTF8</code>编码转换为 API所需要的<code>UTF16</code>编码。</p></li><li><p>反之，在API函数名后也可以显式的添加 <code>A</code> 尾标强制声明此 API是一个 <code>ANSI</code> 版本的函数（对字符串参数不使用任何 <code>Unicode</code> 转换，即使加载 DLL时在调用约定中声明了默认以 <code>unicode</code> 方式调用），规则同上 - 也即真实的API函数名后面有没有 <code>A</code> 尾标并不重要，在<code>aardio</code>中都可以加上 <code>A</code> 尾标。 </p></li></ul></li><li><p>一些API在接收字符串、字节数组等参数时，通常下一个参数需要指定内存长度， <code>aardio</code>中用<code>#</code>操作符取字符串、缓冲区的长度时，返回的都是字节长度，一些 API可能需要你传入字符个数， 发果是<code>Unicode</code>版本的 API一个字符为两个字节，对于一个<code>UTF8</code>字符串应当事用<code>string.len()</code>函数得到真正的字符长度, 而<code>Unicode</code>字符串则用<code>#</code>取到字节长度后乘以2即可。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一般建议不要先声明API再去调用，直接调用更方便也更节省资源(除非有特殊的数据类型必须通过声明API来指定)。&lt;/p&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
      <category term="API" scheme="http://suiang.cn/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>WebDriver 协议客户端</title>
    <link href="http://suiang.cn/posts/39047/"/>
    <id>http://suiang.cn/posts/39047/</id>
    <published>2020-03-24T14:18:00.000Z</published>
    <updated>2021-01-12T22:12:01.073Z</updated>
    
    <content type="html"><![CDATA[<p>WebDriver 是用于控制浏览器的一个协议，<br>我们试试用 aardio 来实现这个功能，我们只需要浏览器提供的接口。</p><a id="more"></a><p>例如 chromeDriver.exe （ 不同版本的chrome要下载不同版本的 chromeDriver.exe ）。其他的东西我们就不需要了，安装这个安装那个多麻烦对吗？！  </p><p>看一下其他语言的封装库，代码可能很多，但是不要被吓倒了，用 aardio 我们真的只要几句代码就可以实现 WebDriver 客户端了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> web.rest.jsonClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">//协议文档 https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol</span></span><br><span class="line"><span class="keyword">var</span> http = web.rest.jsonClient();</span><br><span class="line"><span class="keyword">var</span> webDriver = http.api(<span class="string">"http://localhost:9515/"</span>);<span class="comment">//改成chromedriver的实际端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建会话，打开chrome浏览器</span></span><br><span class="line"><span class="keyword">var</span> chrome = webDriver.session(</span><br><span class="line">    desiredCapabilities = &#123;</span><br><span class="line">        browserName = <span class="string">"chrome"</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取打开的浏览器会话</span></span><br><span class="line"><span class="keyword">var</span> session = webDriver.session[chrome.sessionId];</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开网页</span></span><br><span class="line">session.url(</span><br><span class="line">    url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找百度输入框</span></span><br><span class="line"><span class="keyword">var</span> ele = session.element(</span><br><span class="line">    using = <span class="string">"id"</span>;</span><br><span class="line">    value = <span class="string">"kw"</span>;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在网页输入框输入内容</span></span><br><span class="line">session.element[ ele.value.ELEMENT ].value(</span><br><span class="line">    value = &#123; <span class="string">"ChromeDriver"</span> &#125;;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WebDriver 是用于控制浏览器的一个协议，&lt;br&gt;我们试试用 aardio 来实现这个功能，我们只需要浏览器提供的接口。&lt;/p&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
      <category term="Chrome" scheme="http://suiang.cn/tags/Chrome/"/>
    
      <category term="WebDriver" scheme="http://suiang.cn/tags/WebDriver/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 系列范例</title>
    <link href="http://suiang.cn/posts/57740/"/>
    <id>http://suiang.cn/posts/57740/</id>
    <published>2019-11-18T12:32:00.000Z</published>
    <updated>2021-01-12T22:09:41.395Z</updated>
    
    <content type="html"><![CDATA[<p>大家知道Chrome每个版本的适用ChromeDriver版本都不一样，<br>安装不同的Chrome就要去下载不同的ChromeDriver.exe，而且还要命令行启动，绑定固定端口一搞不好还会跟别的进程冲突了。</p><a id="more"></a><p>现在用aardio 最新版中提供的 chrome.driver 所有麻烦都可以解决了，<br>chrome.driver 会自动查找Chrome的安装位置、版本号，自动匹配最合适的ChromeDriver版本，并且负责自动下载安装，自动分配空闲端口，所有事情全自动准备好，只要运行下面的代码就可以了。  </p><p>现在看代码，用法非常简单:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebDriver自动化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建chromeDriver对象</span></span><br><span class="line"><span class="comment">//协议文档 https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol</span></span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建会话，打开chrome浏览器，Chrome新版会强制显示控制台</span></span><br><span class="line"><span class="keyword">var</span> browser = driver.startBrowser();</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开网页</span></span><br><span class="line">browser.go(<span class="string">"http://www.so.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找文本输入框</span></span><br><span class="line"><span class="keyword">var</span> ele = browser.querySelector(<span class="string">"#input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在网页输入框输入内容</span></span><br><span class="line">ele.setValue( <span class="string">"ChromeDriver"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟点击按钮</span></span><br><span class="line">browser.querySelector(<span class="string">"#search-button"</span>).click();</span><br></pre></td></tr></table></figure><p>下面的问题在新版中已解决，可忽略：</p><blockquote><p>注意 Chrome新版会强制显示控制台（ 隐藏也会强行弹出黑窗口，旧版可以隐藏这个黑窗口 ），</p><p>如果想隐藏黑窗口，那么可以用旧版Chrome，在创建 chrome.driver对象时可以在参数中自定义chrome.exe的路径。</p></blockquote><h2 id="调用-Electron"><a href="#调用-Electron" class="headerlink" title="调用 Electron"></a>调用 Electron</h2><p>也可以通过 ChromeDriver 调用 Electron，几句代码就可以了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> electron.driver;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建chromeDriver对象,协议文档</span></span><br><span class="line"><span class="keyword">var</span> driver = electron.driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换electron默认的开始页</span></span><br><span class="line">driver.addArguments(<span class="string">"--app=http://www.so.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建会话，打开chrome浏览器，Chrome新版会强制显示控制台</span></span><br><span class="line"><span class="keyword">var</span> browser = driver.startBrowser();</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开网页</span></span><br><span class="line"><span class="comment">//browser.go("http://www.so.com")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//查找文本输入框</span></span><br><span class="line"><span class="keyword">var</span> ele = browser.querySelector(<span class="string">"#input"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在网页输入框输入内容</span></span><br><span class="line">ele.setValue( <span class="string">"ChromeDriver"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟点击按钮</span></span><br><span class="line">browser.querySelector(<span class="string">"#search-button"</span>).click();</span><br></pre></td></tr></table></figure><h2 id="修改-User-Agent"><a href="#修改-User-Agent" class="headerlink" title="修改 User Agent"></a>修改 User Agent</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line"></span><br><span class="line">driver.addArguments(<span class="string">"--user-agent=mychrome"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开网页</span></span><br><span class="line">driver.startBrowser().go(<span class="string">"http://www.ip138.com/useragent/"</span>)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://peter.sh/experiments/chromium-command-line-switches/" target="_blank" rel="noopener">chrome启动参数大全：</a></p></blockquote><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line"></span><br><span class="line">driver.setProxy(</span><br><span class="line">    proxyType = <span class="string">"manual"</span>;</span><br><span class="line">    httpProxy = <span class="string">"127.0.0.1:12043"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>也可以下面这样写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> browser = driver.startBrowser(</span><br><span class="line">    proxy =&#123;</span><br><span class="line">        proxyType = <span class="string">"manual"</span>;</span><br><span class="line">        httpProxy = <span class="string">"127.0.0.1:12043"</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="新版功能"><a href="#新版功能" class="headerlink" title="新版功能"></a>新版功能</h2><p>chrome.driver新版功能演示，操作chrome就像直接执行Javascript函数那么简单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动浏览器</span></span><br><span class="line">browser = driver.startBrowser();</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开网页</span></span><br><span class="line">browser.go(<span class="string">"http://www.so.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询元素,并且使用元素的querySelector函数查询子元素</span></span><br><span class="line">browser.querySelector(<span class="string">"body"</span>).querySelector(<span class="string">"#input"</span>).setValue( <span class="string">"ChromeDriver"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟点击按钮</span></span><br><span class="line">browser.querySelector(<span class="string">"#search-button"</span>).click()</span><br></pre></td></tr></table></figure><h2 id="隐藏控制台"><a href="#隐藏控制台" class="headerlink" title="隐藏控制台"></a>隐藏控制台</h2><p>网上一些讨论认为这个问题无解，WebDriver也没有找到相关参数，<br>直觉这个可能在启动参数里打开控制台，于是我写了一个假的 chrome.exe，再用 ChromeDriver.exe 调用他，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> win.clip</span><br><span class="line"></span><br><span class="line">win.clip.write(_CMDLINE)</span><br><span class="line"><span class="built_in">console</span>.log(_CMDLINE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.pause();</span><br></pre></td></tr></table></figure><p>chrome.exe获得的启动参数如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--disable-background-networking --disable-client-side-phishing-detection --disable-default-apps --disable-hang-monitor --disable-popup-blocking --disable-prompt-on-repost --disable-sync --disable-web-resources --enable-automation --enable-logging --force-fieldtrials=SiteIsolationExtensions/Control --ignore-certificate-errors --load-extension=&quot;C:\Users\***\AppData\Local\Temp\***\internal&quot; --log-level=0 --metrics-recording-only --no-first-run --password-store=basic --remote-debugging-port=0 --test-type=webdriver --use-mock-keychain --user-data-dir=&quot;C:\Users\***\AppData\Local\Temp\***&quot; data:,</span><br></pre></td></tr></table></figure><p>我们看到可疑参数<code>--enable-logging</code>，<br>进一步测试发现：排除这个参数就可以关闭新版chrome启动跳出来的控制台窗口了，示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver( );</span><br><span class="line">driver.setOptions(</span><br><span class="line">    excludeSwitches =&#123;<span class="string">"enable-logging"</span>&#125; <span class="comment">//注意这里参数前千万不要加 --</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">driver.addArguments(<span class="string">"--app=http://www.aardio.com"</span>)</span><br><span class="line"><span class="keyword">var</span> browser = driver.startBrowser();</span><br></pre></td></tr></table></figure><blockquote><p>已更新 chrome.driver 默认禁用控制台窗口，</p><p>但仍然可以使用 <code>driver.addArguments(&quot;--enable-logging&quot;)</code> 启用这个参数。</p></blockquote><h2 id="app、driver-交互"><a href="#app、driver-交互" class="headerlink" title="app、driver 交互"></a>app、driver 交互</h2><p>aardio新版经过大力改进，<br>现在 chrome.app, chrome.driver 已经可以相互结合使用，chrome与aardio交互更加简单方便。<br>下面是一个简单的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.app;</span><br><span class="line"><span class="keyword">var</span> app = chrome.app();</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定允许chrome中使用JS直接调用的函数</span></span><br><span class="line">app.external = &#123;</span><br><span class="line"></span><br><span class="line">    test = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       app.msgbox(<span class="string">"页面js调用了aardio函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//正式的启动chrome进程</span></span><br><span class="line">app.start(<span class="string">"http://www.aardio.com"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动浏览器，加载aardio.js，并打开ChromeDriver自动化接口</span></span><br><span class="line">    <span class="keyword">var</span> browser = driver.startAppBrowser(app,args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行JS脚本</span></span><br><span class="line">    browser.doScript(<span class="string">`</span></span><br><span class="line"><span class="string">        document.addEventListener("click", function(event) &#123;</span></span><br><span class="line"><span class="string">            aardio.test();</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> browser;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">win.loopMessage();</span><br></pre></td></tr></table></figure><h2 id="禁用自动化测试提示"><a href="#禁用自动化测试提示" class="headerlink" title="禁用自动化测试提示"></a>禁用自动化测试提示</h2><p>方法一：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line">driver.removeArguments(<span class="string">"--enable-automation"</span>)</span><br></pre></td></tr></table></figure><blockquote><p>虽然不显示上面的提示了，但是弹出一个更大的警告。</p></blockquote><p>方法二：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line">driver.addArguments(<span class="string">"--disable-infobars"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>不显示上面的提示，也没有警告了，但是可以看到提示框显示然后快速的关掉，会闪烁一下。</p></blockquote><p>方法三:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chrome.driver;</span><br><span class="line"><span class="keyword">var</span> driver = chrome.driver();</span><br><span class="line">driver.addArguments(<span class="string">"--app=http://www.so.com/index.html"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>用–app模式的方法完美，地址栏、提示框、警告都去掉了，</p><p>但是有一个奇怪的事情是，启动网址要写成 <a href="http://www.so.com/index.html" target="_blank" rel="noopener">http://www.so.com/index.html</a> 这样，如果不写 index.html 有时候会白屏，但不是每个网站都这样。</p></blockquote><h2 id="清理临时文件"><a href="#清理临时文件" class="headerlink" title="清理临时文件"></a>清理临时文件</h2><p>Chrome每个进程只能绑定单独的用户目录 - 才能创建单独的远程调试端口，<br>ChromeDriver 的办法是每次都创建一个临时的用户目录，然后每次都创建新的临时用户目录，而且又不负责删除（其实可以设置为重启系统自动删除，不知道Chrome为什么没有这么做），所以我们只好自己清理了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> fsys;</span><br><span class="line">fsys.enum( fsys.getTempDir(), <span class="string">"scoped_dir*_*"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">dir,filename,fullpath,findData</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!filename)&#123;</span><br><span class="line">            <span class="keyword">if</span>( ..io.exist( io.joinpath(fullpath,<span class="string">"DevToolsActivePort"</span>) ) )&#123;</span><br><span class="line">                fsys.delete(fullpath)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( ..io.exist( io.joinpath(fullpath,<span class="string">"internal.zip"</span>) ) )&#123;</span><br><span class="line">                fsys.delete(fullpath)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="literal">false</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.pause(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家知道Chrome每个版本的适用ChromeDriver版本都不一样，&lt;br&gt;安装不同的Chrome就要去下载不同的ChromeDriver.exe，而且还要命令行启动，绑定固定端口一搞不好还会跟别的进程冲突了。&lt;/p&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
      <category term="Chrome" scheme="http://suiang.cn/tags/Chrome/"/>
    
      <category term="WebDriver" scheme="http://suiang.cn/tags/WebDriver/"/>
    
  </entry>
  
  <entry>
    <title>Typora 自定义命令上传图片</title>
    <link href="http://suiang.cn/posts/40698/"/>
    <id>http://suiang.cn/posts/40698/</id>
    <published>2019-10-28T12:13:00.000Z</published>
    <updated>2021-01-12T22:02:01.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>Typora是我非常喜欢的Markdown编辑器，之前的一个更新，Typora支持了“上传图像”的功能（即写文章时，插入图片自动将其上传至图床），我们可以直接借助IPic、uPic、PicGo等程序，配合Typora自动将图片上传至又拍云等对象存储平台。但是，官方的文档晦涩难懂，我尝试进行了一些配置，但始终还是不好使，那咋办嘛？</p><a id="more"></a><p>其实，将本地图片上传至图床，这个过程本质上来说就是一条HTTP请求，但是如果这个过程还需要在后台一直开着一个图床软件或者安装一些命令行工具（更何况很多工具也是收费的），代价就有些大了。庆幸的是，Typora支持不借助这些图床工具，通过自定义命令（脚本）的方式，完成自动上传图片的功能。</p><p>那么，能不能自己写一个十几行代码的脚本来适配Typora呢？当然可以了。</p><h3 id="一起开始吧"><a href="#一起开始吧" class="headerlink" title="一起开始吧"></a>一起开始吧</h3><p>以Typora自定义命令上传图片为例，当我们从我们插入一张图片时，发生了什么？我们在Typora插入一张本地的图片后，Typora会调用预先设置的自定义命令（通常是运行一个脚本）来上传图片，自定义命令（脚本）上传完图片后输出（注意这里有坑）相应的URL，Typora会读取该URL，并自动把本地图片地址替换为相应的URL。所以只要配置得当，我们在写作时，只需要准备好素材，直接对素材<code>command + c</code>、<code>command + v</code>了。</p><blockquote><p>如果我们要通过自定义命令来上传图片，只需要三步：</p></blockquote><ul><li>编写能够上传图片至相应的图床或者对象存储的脚本</li><li>在偏好设置中进行相应的设置</li><li>测试是否正常</li></ul><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>脚本如下所示:</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Upload Success:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> %<span class="number">1</span>  curl -F name=@%<span class="number">1</span> https://img.vim-cn.com/</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> %<span class="number">2</span>  curl -F name=@%<span class="number">2</span> https://img.vim-cn.com/</span><br></pre></td></tr></table></figure><p>我们在写一个脚本的时候，大体上关注三部分内容，输入、处理过程和输出。处理过程是自己实现的所以还好，但Typora上传图片自定义命令的<strong>传参和输出</strong>是真的奇坑。</p><ul><li><code>传参</code>。Typora上传图片调用自定义命令时，会将待上传的图片作为命令行参数，传入脚本。如<code>bash upload.sh 1.jpg 2.jpg</code>，这里具体有几张待上传的图片不确定，所以参数长度是不固定的，你的脚本必须上传所有作为参数传入的图片。Typora并没有在文档中直接说明这一点（传参的方式、长度），真的给我坑坏了。</li><li><code>输出</code>。事实上，Typora并不关心我们脚本中上传图片的具体过程如何，它只关心我们脚本的最终输出。Typora要求脚本输出结果的方式简单粗暴，直接<code>echo</code>（其他语言比如Python的<code>print</code>）。注意，直接<code>echo</code>也是有格式要求的，脚本需要首先输出<code>Upload Success:</code>，之后，一行对应一个URL，具体格式如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Upload Success:</span><br><span class="line">https:<span class="comment">//sample.com/1.jpg</span></span><br><span class="line">https:<span class="comment">//sample.com/2.jpg</span></span><br></pre></td></tr></table></figure><p>这里，我使用bat脚本，事实上，你可以使用任何变成语言，上传图片至任意的平台。只要你脚本处理好传入的参数，上传完所有图片，最终的输出结果是上面的格式即可。</p><h3 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h3><p>Typora上传脚本支持的自定义命令，可以在偏好设置中选择。上传服务选择<code>Custom Command</code>，自定义命令就是我们插入图片后，Typora调用的命令。如刚才我们的脚本名称为<code>upload.cmd</code>，自定义命令就可以设为<code>upload</code>，注意替换<code>upload</code>的路径为绝对路径。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.vim-cn.com/b7/8ed707df5626286d7bc8cbc6223cbcf8b20e8c.png" alt="偏好设置" title="">                </div>                <div class="image-caption">偏好设置</div>            </figure><h3 id="测试是否正常"><a href="#测试是否正常" class="headerlink" title="测试是否正常"></a>测试是否正常</h3><blockquote><p>完成脚本和偏好设置后，就可以测试脚本是否正常了。打开偏好设置，直接点击<code>验证图片上传选项</code>。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img.vim-cn.com/57/0e459bec95d1a22600da013d1fc1fab2f252f4.png" alt="验证图片" title="">                </div>                <div class="image-caption">验证图片</div>            </figure><h3 id="尾巴"><a href="#尾巴" class="headerlink" title="尾巴"></a>尾巴</h3><p>市面上确实有很多功能丰富的Markdown编辑器，但所见即所得、小巧轻量的Typora依然是我最喜欢的。图片上传功能的加入，极大方便了写作的过程，想想之前，写文章需要手动将图片拖到图床APP，再把URL复制到文章中，就两个字，“繁琐”。</p><p>最后，用Typora写作，自定义命令上传图片，自己写一个脚本，四行代码，卸载掉各种图床工具，插入图片直接<code>command + v</code>，写作原本就该这么简单嘛！&copy; </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;Typora是我非常喜欢的Markdown编辑器，之前的一个更新，Typora支持了“上传图像”的功能（即写文章时，插入图片自动将其上传至图床），我们可以直接借助IPic、uPic、PicGo等程序，配合Typora自动将图片上传至又拍云等对象存储平台。但是，官方的文档晦涩难懂，我尝试进行了一些配置，但始终还是不好使，那咋办嘛？&lt;/p&gt;
    
    </summary>
    
      <category term="Markdown" scheme="http://suiang.cn/categories/Markdown/"/>
    
    
      <category term="Typora" scheme="http://suiang.cn/tags/Typora/"/>
    
      <category term="Markdown" scheme="http://suiang.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>AArdio 简单服务器示例</title>
    <link href="http://suiang.cn/posts/214/"/>
    <id>http://suiang.cn/posts/214/</id>
    <published>2019-05-15T02:43:00.000Z</published>
    <updated>2021-01-12T22:07:05.082Z</updated>
    
    <content type="html"><![CDATA[<p>使用 aardio 中的 <code>simpleHttpServer</code> 库实现 python 例程中的 HTTP 服务器功能！</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单服务器示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="built_in">console</span>;</span><br><span class="line"><span class="keyword">import</span> process;</span><br><span class="line"><span class="keyword">import</span> wsock.tcp.simpleHttpServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> srvHttp = wsock.tcp.simpleHttpServer()</span><br><span class="line">srvHttp.documentRoot = <span class="string">"d:\"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">console.log(srvHttp.getUrl());</span></span><br><span class="line"><span class="string">process.execute(srvHttp.getUrl());</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">srvHttp.run( </span></span><br><span class="line"><span class="string">    function(response,request)&#123; </span></span><br><span class="line"><span class="string">        import fsys;</span></span><br><span class="line"><span class="string">        import inet.url;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        if(!fsys.isDir(request.path) ) &#123;</span></span><br><span class="line"><span class="string">            if( ..io.exist(request.path) )</span></span><br><span class="line"><span class="string">                response.loadcode(request.path)</span></span><br><span class="line"><span class="string">            else &#123;</span></span><br><span class="line"><span class="string">                request.path = fsys.getParentDir(request.path)</span></span><br><span class="line"><span class="string">            &#125; </span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        response.write("</span> &lt;title&gt;Directory listing <span class="keyword">for</span> /&lt;/title&gt;</span><br><span class="line">&lt;body&gt;&lt;h2&gt;Directory listing for",request.path,"&lt;/h2&gt;&lt;hr&gt;&lt;ul&gt;")</span><br><span class="line"></span><br><span class="line">        var file,dir = fsys.list(request.path,,"*.*");</span><br><span class="line">        for(i=1;#dir;1)&#123;</span><br><span class="line">            response.write('&lt;li&gt;&lt;a href="'</span><br><span class="line">                ,inet.url.append(request.path,dir[ i ])</span><br><span class="line">                ,'"&gt;'+tostring(i)+") ",dir[ i ],'&lt;/a&gt;&lt;br&gt;\r\n');</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        for(i=1;#file;1)&#123;</span><br><span class="line">            response.write('&lt;li&gt;&lt;a href="'</span><br><span class="line">                ,inet.url.append(request.path,file[ i ])</span><br><span class="line">                ,'"&gt;'+tostring(i)+") ",file[ i ],'&lt;/a&gt;&lt;br&gt;\r\n');</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="http://bbs.aardio.com/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=13737&amp;pid=74460" target="_blank" rel="noopener">用aardio实现python例程中的HTTP服务器功能</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 aardio 中的 &lt;code&gt;simpleHttpServer&lt;/code&gt; 库实现 python 例程中的 HTTP 服务器功能！&lt;/p&gt;
    
    </summary>
    
      <category term="AArdio" scheme="http://suiang.cn/categories/AArdio/"/>
    
    
      <category term="AArdio" scheme="http://suiang.cn/tags/AArdio/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub 搭建个人博客</title>
    <link href="http://suiang.cn/posts/48270/"/>
    <id>http://suiang.cn/posts/48270/</id>
    <published>2017-03-28T12:13:00.000Z</published>
    <updated>2021-01-12T22:01:03.937Z</updated>
    
    <content type="html"><![CDATA[<p> <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> , 一个简单地、轻量地、基于 Node 的一个静态博客框架。下面介绍下如何使用 hexo 和 github pages 搭建个人博客。</p> <a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote><p>注意：本文针对Windows平台和Hexo 3.2.2</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br><span class="line">hexo: 3.2.2</span><br><span class="line">hexo-cli: 1.0.2</span><br><span class="line">os: Windows_NT 10.0.14393 win32 x64</span><br><span class="line">http_parser: 2.7.0</span><br><span class="line">node: 6.10.1</span><br></pre></td></tr></table></figure><h3 id="安装-Github-For-Windows"><a href="#安装-Github-For-Windows" class="headerlink" title="安装 Github For Windows"></a>安装 Github For Windows</h3><p>主要使用 git bash，如果对 git 命令不熟悉的也可以使用 git 客户端进行某些操作<br><a href="https://windows.github.com/" target="_blank" rel="noopener">Github For Windows</a></p><h3 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h3><p>因为要使用 npm，比较简单的方法就是安装 <a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a></p><blockquote><p>安装完成后添加 Path 环境变量，使 npm 命令生效<br><code>;C:\Program Files\nodejs\node_modules\npm</code></p></blockquote><h3 id="创建-Github-Pages"><a href="#创建-Github-Pages" class="headerlink" title="创建 Github Pages"></a>创建 Github Pages</h3><p>没有Github 账号的话，需要注册一个，然后创建一个仓库，名字是<br><code>[yourGithubAccount].github.io</code></p><h3 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h3><p>使用 <code>git bash</code> 生成 <code>public ssh key</code>, 以下是最简单的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>然后在 <code>C:\Users\[用户名]\.ssh</code> 目录下会生成 <code>id_rsa.pub</code> ，将内容完全复制到 <code>Github Account Setting</code> 里的 <code>ssh key</code> 粘贴即可。</p><p><strong>测试</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi [yourGithubAccount]! You&apos;ve successfully authenticated,</span><br><span class="line">but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p><strong>设置用户信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;[yourName]&quot;//用户名</span><br><span class="line">$ git config --global user.email  &quot;[yourEmail]&quot;//填写自己的邮箱</span><br></pre></td></tr></table></figure><blockquote><p>经过以上步骤，本机已成功连接到 github，为部署打下基础。</p></blockquote><hr><h2 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h2><h3 id="本地-clone"><a href="#本地-clone" class="headerlink" title="本地 clone"></a>本地 clone</h3><p>创建本地目录，然后使用 git bash 或者客户端 clone 之前创建的仓库<br><code>[yourGithubAccount].github.io</code></p><h3 id="安装、配置-Hexo"><a href="#安装、配置-Hexo" class="headerlink" title="安装、配置 Hexo"></a>安装、配置 Hexo</h3><p>进入仓库目录，使用 <code>npm</code> 安装配置 <code>hexo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br><span class="line">$ npm install hexo --save</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p><strong>安装 Hexo 插件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><blockquote><p>安装 <code>ejs</code>， 否则无法解析模板</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install ejs</span><br></pre></td></tr></table></figure><p>安装 hexo 所需的依赖模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>然后运行下面的命令生成 public 文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><blockquote><p>在浏览器输入 <code>localhost:4000</code> 本地查看效果</p></blockquote><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>hexo 有很多主题可选，我选了 <a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">indigo</a>，Material Design 风格的Hexo主题，基于 Hexo 3.0+ 制作。支持多说评论、网站统计、分享等功能，只要稍微配置即可使用。可以根据自己需求进行选择。</p><hr><h2 id="使用-hexo"><a href="#使用-hexo" class="headerlink" title="使用 hexo"></a>使用 hexo</h2><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>配置 <code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:[yourGithubAccount]/[yourGithubAccount].github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>即可将 hexo 部署到 github 上</p><blockquote><p>提示找不到 git 时</p></blockquote><p>需执行（虽然之前已经执行过）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>即可访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://[yourGithubAccount].github.io/</span><br></pre></td></tr></table></figure></p><h3 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;title&quot;</span><br></pre></td></tr></table></figure><p>然后在 <code>source/_post</code> 下会生成该.md文件，即可使用编辑器编写了编写过程中，可以在本地实时查看效果，很是方便。支持 <code>markdown</code>，不了解的自行 <a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a> 。</p><p>编写完成后，部署还是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>如果部署过程中报错，可执行以下命令重新部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><h3 id="添加自定义页面"><a href="#添加自定义页面" class="headerlink" title="添加自定义页面"></a>添加自定义页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure><p>该命令会生成 <code>source/about/index.md</code>，编辑即可</p><h3 id="插件的升级与卸载"><a href="#插件的升级与卸载" class="headerlink" title="插件的升级与卸载"></a>插件的升级与卸载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm update</span><br><span class="line">$ npm uninstall &lt;plugin-name&gt;</span><br></pre></td></tr></table></figure><h3 id="更新-hexo"><a href="#更新-hexo" class="headerlink" title="更新 hexo"></a>更新 hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g hexo</span><br></pre></td></tr></table></figure><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><p>在 <code>/source/</code> 目录下新建内容为自定义域名的 <code>CNAME</code> 文件，部署即可（域名设置略）</p><blockquote><p>备注：Hexo简写命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n #new</span><br><span class="line">hexo g #generate</span><br><span class="line">hexo s #server</span><br><span class="line">hexo d #deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; , 一个简单地、轻量地、基于 Node 的一个静态博客框架。下面介绍下如何使用 hexo 和 github pages 搭建个人博客。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://suiang.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://suiang.cn/tags/Hexo/"/>
    
      <category term="Github" scheme="http://suiang.cn/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World！</title>
    <link href="http://suiang.cn/posts/16107/"/>
    <id>http://suiang.cn/posts/16107/</id>
    <published>2017-03-27T14:13:00.000Z</published>
    <updated>2021-01-12T22:00:36.048Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎使用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> ! 这是你的第一篇文章。检查 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">文档</a> 以获取更多信息。如果你在使用Hexo时遇到任何问题，你可以在  <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">故障排除</a> 中找到答案，或者你可以在 <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a> 提问。</p><a id="more"></a><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎使用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; ! 这是你的第一篇文章。检查 &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt; 以获取更多信息。如果你在使用Hexo时遇到任何问题，你可以在  &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;故障排除&lt;/a&gt; 中找到答案，或者你可以在 &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; 提问。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://suiang.cn/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://suiang.cn/tags/Hexo/"/>
    
  </entry>
  
</feed>
